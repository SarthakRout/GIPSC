WARNING: 100 shift/reduce conflicts
WARNING: 7 reduce/reduce conflicts
WARNING: reduce/reduce conflict in state 95 resolved using rule (IdentifierOth -> <empty>)
WARNING: rejected rule (TypeName -> IDENT) in state 95
PLY: PARSE DEBUG START
State  : 0
Stack  : . LexToken(PACKAGE,'package',1,1,0)
Action : Shift and goto state 3
State  : 3
Stack  : PACKAGE . LexToken(IDENT,'main',1,9,8)
Action : Shift and goto state 6
State  : 6
Defaulted state 6: Reduce using 3
Stack  : PACKAGE IDENT . None
Action : Reduce rule [PackageName -> IDENT] with ['main'] and goto state 5
Result : <list @ 0x7f01ebabb508> (['PackageName', ['main']])
State  : 5
Defaulted state 5: Reduce using 2
Stack  : PACKAGE PackageName . None
Action : Reduce rule [PackageClause -> PACKAGE PackageName] with ['package',<list @ 0x7f01ebabb508>] and goto state 2
Result : <list @ 0x7f01eba509c8> (['PackageClause', ['package'], ['Package ...)
State  : 2
Stack  : PackageClause . LexToken(SEMICOLON,';',1,13,12)
Action : Shift and goto state 4
State  : 4
Stack  : PackageClause SEMICOLON . LexToken(IMPORT,'import',2,1,14)
Action : Shift and goto state 9
State  : 9
Stack  : PackageClause SEMICOLON IMPORT . LexToken(LPAREN,'(',2,8,21)
Action : Shift and goto state 23
State  : 23
Stack  : PackageClause SEMICOLON IMPORT LPAREN . LexToken(STRING,'"fmt"',3,5,27)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"fmt"'] and goto state 25
Result : <list @ 0x7f01eba50b88> (['ImportPath', ['"fmt"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba50b88>] and goto state 45
Result : <list @ 0x7f01eba50fc8> (['ImportSpec', ['ImportPath', ['"fmt"']] ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec . LexToken(SEMICOLON,';',3,10,32)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON . LexToken(STRING,'"math/rand"',4,5,38)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"math/rand"'] and goto state 25
Result : <list @ 0x7f01eba50f08> (['ImportPath', ['"math/rand"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba50f08>] and goto state 45
Result : <list @ 0x7f01eba51088> (['ImportSpec', ['ImportPath', ['"math/ra ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec . LexToken(SEMICOLON,';',4,16,49)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON . LexToken(STRING,'"time"',5,5,55)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"time"'] and goto state 25
Result : <list @ 0x7f01eba511c8> (['ImportPath', ['"time"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba511c8>] and goto state 45
Result : <list @ 0x7f01eba51248> (['ImportSpec', ['ImportPath', ['"time"'] ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec . LexToken(SEMICOLON,';',5,11,61)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec SEMICOLON . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMWARNING: 100 shift/reduce conflicts
WARNING: 7 reduce/reduce conflicts
WARNING: reduce/reduce conflict in state 95 resolved using rule (IdentifierOth -> <empty>)
WARNING: rejected rule (TypeName -> IDENT) in state 95
PLY: PARSE DEBUG START
State  : 0
Stack  : . LexToken(PACKAGE,'package',1,1,0)
Action : Shift and goto state 3
State  : 3
Stack  : PACKAGE . LexToken(IDENT,'main',1,9,8)
Action : Shift and goto state 6
State  : 6
Defaulted state 6: Reduce using 3
Stack  : PACKAGE IDENT . None
Action : Reduce rule [PackageName -> IDENT] with ['main'] and goto state 5
Result : <list @ 0x7f01ebabb508> (['PackageName', ['main']])
State  : 5
Defaulted state 5: Reduce using 2
Stack  : PACKAGE PackageName . None
Action : Reduce rule [PackageClause -> PACKAGE PackageName] with ['package',<list @ 0x7f01ebabb508>] and goto state 2
Result : <list @ 0x7f01eba509c8> (['PackageClause', ['package'], ['Package ...)
State  : 2
Stack  : PackageClause . LexToken(SEMICOLON,';',1,13,12)
Action : Shift and goto state 4
State  : 4
Stack  : PackageClause SEMICOLON . LexToken(IMPORT,'import',2,1,14)
Action : Shift and goto state 9
State  : 9
Stack  : PackageClause SEMICOLON IMPORT . LexToken(LPAREN,'(',2,8,21)
Action : Shift and goto state 23
State  : 23
Stack  : PackageClause SEMICOLON IMPORT LPAREN . LexToken(STRING,'"fmt"',3,5,27)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"fmt"'] and goto state 25
Result : <list @ 0x7f01eba50b88> (['ImportPath', ['"fmt"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba50b88>] and goto state 45
Result : <list @ 0x7f01eba50fc8> (['ImportSpec', ['ImportPath', ['"fmt"']] ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec . LexToken(SEMICOLON,';',3,10,32)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON . LexToken(STRING,'"math/rand"',4,5,38)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"math/rand"'] and goto state 25
Result : <list @ 0x7f01eba50f08> (['ImportPath', ['"math/rand"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba50f08>] and goto state 45
Result : <list @ 0x7f01eba51088> (['ImportSpec', ['ImportPath', ['"math/ra ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec . LexToken(SEMICOLON,';',4,16,49)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON . LexToken(STRING,'"time"',5,5,55)
Action : Shift and goto state 27
State  : 27
Defaulted state 27: Reduce using 13
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON STRING . None
Action : Reduce rule [ImportPath -> STRING] with ['"time"'] and goto state 25
Result : <list @ 0x7f01eba511c8> (['ImportPath', ['"time"']])
State  : 25
Defaulted state 25: Reduce using 12
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportPath . None
Action : Reduce rule [ImportSpec -> ImportPath] with [<list @ 0x7f01eba511c8>] and goto state 45
Result : <list @ 0x7f01eba51248> (['ImportSpec', ['ImportPath', ['"time"'] ...)
State  : 45
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec . LexToken(SEMICOLON,';',5,11,61)
Action : Shift and goto state 81
State  : 81
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec SEMICOLON . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> <empty>] with [] and goto state 149
Result : <list @ 0x7f01eba51508> (['ImportMult'])
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba51248>,';',['ImportMult']] and goto state 149
Result : <list @ 0x7f01eba515c8> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba51088>,';',<list @ 0x7f01eba515c8>] and goto state 149
Result : <list @ 0x7f01eba51648> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba50fc8>,';',<list @ 0x7f01eba51648>] and goto state 44
Result : <list @ 0x7f01eba51788> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 44
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Shift and goto state 80
State  : 80
Defaulted state 80: Reduce using 7
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpecMult RPAREN . None
Action : Reduce rule [ImportDecl -> IMPORT LPAREN ImportSpecMult RPAREN] with ['import','(',<list @ 0x7f01eba51788>,')'] and goto state 8
Result : <list @ 0x7f01eba518c8> (['ImportDecl', ['import'], ['('], ['Impo ...)
State  : 8
Stack  : PackageClause SEMICOLON ImportDecl . LexToken(SEMICOLON,';',6,2,64)
Action : Shift and goto state 21
State  : 21
Stack  : PackageClause SEMICOLON ImportDecl SEMICOLON . LexToken(TYPE,'type',8,1,67)
Action : Reduce rule [ImportDeclMult -> <empty>] with [] and goto state 43
Result : <list @ 0x7f01eba51b48> (['ImportDeclMult'])
State  : 43
Stack  : PackageClause SEMICOLON ImportDecl SEMICOLON ImportDeclMult . LexToken(TYPE,'type',8,1,67)
Action : Reduce rule [ImportDeclMult -> ImportDecl SEMICOLON ImportDeclMult] with [<list @ 0x7f01eba518c8>,';',<list @ 0x7f01eba51b48>] and goto state 7
Result : <list @ 0x7f01eba51c48> (['ImportDeclMult', ['ImportDecl', ['impo ...)
State  : 7
Stack  : PackageClause SEMICOLON ImportDeclMult . LexToken(TYPE,'type',8,1,67)
Action : Shift and goto state 20
State  : 20
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE . LexToken(IDENT,'Node',8,6,72)
Action : Shift and goto state 42
State  : 42
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT . LexToken(STRUCT,'struct',8,11,77)
Action : Shift and goto state 66
State  : 66
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT . LexToken(LBRACE,'{',8,18,84)
Action : Shift and goto state 135
State  : 135
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE . LexToken(IDENT,'value',9,5,90)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IDENT . LexToken(IDENT,'int',9,11,96)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01ebabbb88> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IDENT IdentifierOth . LexToken(IDENT,'int',9,11,96)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['value',<list @ 0x7f01ebabbb88>] and goto state 247
Result : <list @ 0x7f01ebabbc08> (['IdentifierList', ['value'], ['Identifi ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList . LexToken(IDENT,'int',9,11,96)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList IDENT . LexToken(SEMICOLON,';',9,14,99)
Actioult -> <empty>] with [] and goto state 149
Result : <list @ 0x7f01eba51508> (['ImportMult'])
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba51248>,';',['ImportMult']] and goto state 149
Result : <list @ 0x7f01eba515c8> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba51088>,';',<list @ 0x7f01eba515c8>] and goto state 149
Result : <list @ 0x7f01eba51648> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 149
Defaulted state 149: Reduce using 8
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpec SEMICOLON ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Reduce rule [ImportSpecMult -> ImportSpec SEMICOLON ImportSpecMult] with [<list @ 0x7f01eba50fc8>,';',<list @ 0x7f01eba51648>] and goto state 44
Result : <list @ 0x7f01eba51788> (['ImportMult', ['ImportSpec', ['ImportPa ...)
State  : 44
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpecMult . LexToken(RPAREN,')',6,1,63)
Action : Shift and goto state 80
State  : 80
Defaulted state 80: Reduce using 7
Stack  : PackageClause SEMICOLON IMPORT LPAREN ImportSpecMult RPAREN . None
Action : Reduce rule [ImportDecl -> IMPORT LPAREN ImportSpecMult RPAREN] with ['import','(',<list @ 0x7f01eba51788>,')'] and goto state 8
Result : <list @ 0x7f01eba518c8> (['ImportDecl', ['import'], ['('], ['Impo ...)
State  : 8
Stack  : PackageClause SEMICOLON ImportDecl . LexToken(SEMICOLON,';',6,2,64)
Action : Shift and goto state 21
State  : 21
Stack  : PackageClause SEMICOLON ImportDecl SEMICOLON . LexToken(TYPE,'type',8,1,67)
Action : Reduce rule [ImportDeclMult -> <empty>] with [] and goto state 43
Result : <list @ 0x7f01eba51b48> (['ImportDeclMult'])
State  : 43
Stack  : PackageClause SEMICOLON ImportDecl SEMICOLON ImportDeclMult . LexToken(TYPE,'type',8,1,67)
Action : Reduce rule [ImportDeclMult -> ImportDecl SEMICOLON ImportDeclMult] with [<list @ 0x7f01eba518c8>,';',<list @ 0x7f01eba51b48>] and goto state 7
Result : <list @ 0x7f01eba51c48> (['ImportDeclMult', ['ImportDecl', ['impo ...)
State  : 7
Stack  : PackageClause SEMICOLON ImportDeclMult . LexToken(TYPE,'type',8,1,67)
Action : Shift and goto state 20
State  : 20
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE . LexToken(IDENT,'Node',8,6,72)
Action : Shift and goto state 42
State  : 42
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT . LexToken(STRUCT,'struct',8,11,77)
Action : Shift and goto state 66
State  : 66
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT . LexToken(LBRACE,'{',8,18,84)
Action : Shift and goto state 135
State  : 135
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE . LexToken(IDENT,'value',9,5,90)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IDENT . LexToken(IDENT,'int',9,11,96)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01ebabbb88> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IDENT IdentifierOth . LexToken(IDENT,'int',9,11,96)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['value',<list @ 0x7f01ebabbb88>] and goto state 247
Result : <list @ 0x7f01ebabbc08> (['IdentifierList', ['value'], ['Identifi ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList . LexToken(IDENT,'int',9,11,96)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList IDENT . LexToken(SEMICOLON,';',9,14,99)
Action : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
n : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
Result : <list @ 0x7f01ebabb6c8> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList TypeName . LexToken(SEMICOLON,';',9,14,99)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebabb6c8>] and goto state 323
Result : <list @ 0x7f01ebabbf48> (['Type', ['TypeName', ['int']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList Type . LexToken(SEMICOLON,';',9,14,99)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebabbc08>,<list @ 0x7f01ebabbf48>] and goto state 246
Result : <list @ 0x7f01eba51c88> (['FieldDecl', ['IdentifierList', ['value ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl . LexToken(SEMICOLON,';',9,14,99)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON . LexToken(IDENT,'sub_tree_sum',10,5,105)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IDENT . LexToken(IDENT,'int',10,18,118)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba51d48> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(IDENT,'int',10,18,118)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['sub_tree_sum',<list @ 0x7f01eba51d48>] and goto state 247
Result : <list @ 0x7f01eba51d08> (['IdentifierList', ['sub_tree_sum'], ['I ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList . LexToken(IDENT,'int',10,18,118)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList IDENT . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
Result : <list @ 0x7f01ebb6adc8> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList TypeName . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebb6adc8>] and goto state 323
Result : <list @ 0x7f01eba51dc8> (['Type', ['TypeName', ['int']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01eba51d08>,<list @ 0x7f01eba51dc8>] and goto state 246
Result : <list @ 0x7f01eba51fc8> (['FieldDecl', ['IdentifierList', ['sub_t ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',10,21,121)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'flag',11,5,127)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(IDENT,'bool',11,10,132)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba51f88> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(IDENT,'bool',11,10,132)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['flag',<list @ 0x7f01eba51f88>] and goto state 247
Result : <list @ 0x7f01eba52088> (['IdentifierList', ['flag'], ['Identifie ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(IDENT,'bool',11,10,132)
ActiResult : <list @ 0x7f01ebabb6c8> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList TypeName . LexToken(SEMICOLON,';',9,14,99)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebabb6c8>] and goto state 323
Result : <list @ 0x7f01ebabbf48> (['Type', ['TypeName', ['int']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE IdentifierList Type . LexToken(SEMICOLON,';',9,14,99)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebabbc08>,<list @ 0x7f01ebabbf48>] and goto state 246
Result : <list @ 0x7f01eba51c88> (['FieldDecl', ['IdentifierList', ['value ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl . LexToken(SEMICOLON,';',9,14,99)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON . LexToken(IDENT,'sub_tree_sum',10,5,105)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IDENT . LexToken(IDENT,'int',10,18,118)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba51d48> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(IDENT,'int',10,18,118)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['sub_tree_sum',<list @ 0x7f01eba51d48>] and goto state 247
Result : <list @ 0x7f01eba51d08> (['IdentifierList', ['sub_tree_sum'], ['I ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList . LexToken(IDENT,'int',10,18,118)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList IDENT . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
Result : <list @ 0x7f01ebb6adc8> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList TypeName . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebb6adc8>] and goto state 323
Result : <list @ 0x7f01eba51dc8> (['Type', ['TypeName', ['int']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',10,21,121)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01eba51d08>,<list @ 0x7f01eba51dc8>] and goto state 246
Result : <list @ 0x7f01eba51fc8> (['FieldDecl', ['IdentifierList', ['sub_t ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',10,21,121)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'flag',11,5,127)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(IDENT,'bool',11,10,132)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba51f88> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(IDENT,'bool',11,10,132)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['flag',<list @ 0x7f01eba51f88>] and goto state 247
Result : <list @ 0x7f01eba52088> (['IdentifierList', ['flag'], ['Identifie ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(IDENT,'bool',11,10,132)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList IDENT . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [TypeName -> IDENT] with ['bool'] and goto state 55
Result : <list @ 0x7f01ebb6ab88> (['TypeName', ['bool']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeName . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebb6ab88>] and goto state 323
Result : <list @ 0x7f01eba52108> (['Type', ['TypeName', ['bool']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01eba52088>,<list @ 0x7f01eba52108>] and goto state 246
Result : <list @ 0x7f01eba520c8> (['FieldDecl', ['IdentifierList', ['flag' ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',11,14,136)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'left',12,5,142)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',12,10,147)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba52148> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',12,10,147)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['left',<list @ 0x7f01eba52148>] and goto state 247
Result : <list @ 0x7f01ebb6a6c8> (['IdentifierList', ['left'], ['Identifie ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',12,10,147)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',12,11,148)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba52248> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba52248>] and goto state 137
Result : <list @ 0x7f01eba52388> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba52388>] and goto state 136
Result : <list @ 0x7f01eba52308> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba52308>] and goto state 61
Result : <list @ 0x7f01eba52448> (['PointerTyon : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList IDENT . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [TypeName -> IDENT] with ['bool'] and goto state 55
Result : <list @ 0x7f01ebb6ab88> (['TypeName', ['bool']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeName . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebb6ab88>] and goto state 323
Result : <list @ 0x7f01eba52108> (['Type', ['TypeName', ['bool']]])
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',11,14,136)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01eba52088>,<list @ 0x7f01eba52108>] and goto state 246
Result : <list @ 0x7f01eba520c8> (['FieldDecl', ['IdentifierList', ['flag' ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',11,14,136)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'left',12,5,142)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',12,10,147)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba52148> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',12,10,147)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['left',<list @ 0x7f01eba52148>] and goto state 247
Result : <list @ 0x7f01ebb6a6c8> (['IdentifierList', ['left'], ['Identifie ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',12,10,147)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',12,11,148)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba52248> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba52248>] and goto state 137
Result : <list @ 0x7f01eba52388> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba52388>] and goto state 136
Result : <list @ 0x7f01eba52308> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba52308>] and goto state 61
Result : <list @ 0x7f01eba52448> (['PointerType', ['*'], ['BaseType', ['Ty ...)
pe', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba52448>] and goto state 56
Result : <list @ 0x7f01eba52588> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba52588>] and goto state 323
Result : <list @ 0x7f01eba52708> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a6c8>,<list @ 0x7f01eba52708>] and goto state 246
Result : <list @ 0x7f01eba52748> (['FieldDecl', ['IdentifierList', ['left' ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',12,15,152)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'right',13,5,158)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',13,11,164)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba52788> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',13,11,164)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['right',<list @ 0x7f01eba52788>] and goto state 247
Result : <list @ 0x7f01ebb6a688> (['IdentifierList', ['right'], ['Identifi ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',13,11,164)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',13,12,165)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba52888> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba52888>] and goto state 137
Result : <list @ 0x7f01eba52b88> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba52b88>] and goto state 136
Result : <list @ 0x7f01eba52ac8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba52448>] and goto state 56
Result : <list @ 0x7f01eba52588> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba52588>] and goto state 323
Result : <list @ 0x7f01eba52708> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',12,15,152)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a6c8>,<list @ 0x7f01eba52708>] and goto state 246
Result : <list @ 0x7f01eba52748> (['FieldDecl', ['IdentifierList', ['left' ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',12,15,152)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'right',13,5,158)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',13,11,164)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba52788> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',13,11,164)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['right',<list @ 0x7f01eba52788>] and goto state 247
Result : <list @ 0x7f01ebb6a688> (['IdentifierList', ['right'], ['Identifi ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',13,11,164)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',13,12,165)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba52888> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba52888>] and goto state 137
Result : <list @ 0x7f01eba52b88> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba52b88>] and goto state 136
Result : <list @ 0x7f01eba52ac8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba52ac8>] and goto state 61
Result : <list @ 0x7f01eba52c08> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba52c08>] and goto state 56
Result : <list @ 0x7f01eba52e08> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba52e08>] and goto state 323
Result : <list @ 0x7f01eba53208> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a688>,<list @ 0x7f01eba53208>] and goto state 246
Result : <list @ 0x7f01eba53288> (['FieldDecl', ['IdentifierList', ['right ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',13,16,169)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'parent',14,5,175)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',14,12,182)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba53348> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',14,12,182)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['parent',<list @ 0x7f01eba53348>] and goto state 247
Result : <list @ 0x7f01ebb6a888> (['IdentifierList', ['parent'], ['Identif ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',14,12,182)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',14,13,183)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba53488> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba53488>] and goto state 137
FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba52ac8>] and goto state 61
Result : <list @ 0x7f01eba52c08> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba52c08>] and goto state 56
Result : <list @ 0x7f01eba52e08> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba52e08>] and goto state 323
Result : <list @ 0x7f01eba53208> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',13,16,169)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a688>,<list @ 0x7f01eba53208>] and goto state 246
Result : <list @ 0x7f01eba53288> (['FieldDecl', ['IdentifierList', ['right ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',13,16,169)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(IDENT,'parent',14,5,175)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT . LexToken(MUL,'*',14,12,182)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01eba53348> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IDENT IdentifierOth . LexToken(MUL,'*',14,12,182)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['parent',<list @ 0x7f01eba53348>] and goto state 247
Result : <list @ 0x7f01ebb6a888> (['IdentifierList', ['parent'], ['Identif ...)
State  : 247
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList . LexToken(MUL,'*',14,12,182)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL . LexToken(IDENT,'Node',14,13,183)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL IDENT . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01eba53488> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL TypeName . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01eba53488>] and goto state 137
Result : <list @ 0x7f01eba539c8> (['Type', ['TypeName', ['Node']]])
Result : <list @ 0x7f01eba539c8> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba539c8>] and goto state 136
Result : <list @ 0x7f01eba537c8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba537c8>] and goto state 61
Result : <list @ 0x7f01eba53a88> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba53a88>] and goto state 56
Result : <list @ 0x7f01eba53b08> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba53b08>] and goto state 323
Result : <list @ 0x7f01eba53bc8> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a888>,<list @ 0x7f01eba53bc8>] and goto state 246
Result : <list @ 0x7f01eba53e88> (['FieldDecl', ['IdentifierList', ['paren ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',14,17,187)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> <empty>] with [] and goto state 362
Result : <list @ 0x7f01eba53f08> (['FieldDeclMult'])
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba53e88>,';',<list @ 0x7f01eba53f08>] and goto state 362
Result : <list @ 0x7f01eba53f48> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba53288>,';',<list @ 0x7f01eba53f48>] and goto state 362
Result : <list @ 0x7f01eba54408> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEState  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL Type . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01eba539c8>] and goto state 136
Result : <list @ 0x7f01eba537c8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList MUL BaseType . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01eba537c8>] and goto state 61
Result : <list @ 0x7f01eba53a88> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList PointerType . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01eba53a88>] and goto state 56
Result : <list @ 0x7f01eba53b08> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList TypeLit . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01eba53b08>] and goto state 323
Result : <list @ 0x7f01eba53bc8> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 323
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON IdentifierList Type . LexToken(SEMICOLON,';',14,17,187)
Action : Reduce rule [FieldDecl -> IdentifierList Type] with [<list @ 0x7f01ebb6a888>,<list @ 0x7f01eba53bc8>] and goto state 246
Result : <list @ 0x7f01eba53e88> (['FieldDecl', ['IdentifierList', ['paren ...)
State  : 246
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl . LexToken(SEMICOLON,';',14,17,187)
Action : Shift and goto state 322
State  : 322
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> <empty>] with [] and goto state 362
Result : <list @ 0x7f01eba53f08> (['FieldDeclMult'])
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba53e88>,';',<list @ 0x7f01eba53f08>] and goto state 362
Result : <list @ 0x7f01eba53f48> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba53288>,';',<list @ 0x7f01eba53f48>] and goto state 362
Result : <list @ 0x7f01eba54408> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba52748>,';',<list @ 0x7f01eba54408>] and goto state 362
Result : <list @ 0x7f01eba54248> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba520c8>,';',<list @ 0x7f01eba54248>] and goto state 362
Result : <list @ 0x7f01ebc18888> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba51fc8>,';',<list @ 0x7f01ebc18888>] and goto state 362
Result : <list @ 0x7f01ebabb488> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba51c88>,';',<list @ 0x7f01ebabb488>] and goto state 245
Result : <list @ 0x7f01ebb6a648> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 245
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Shift and goto state 321
State  : 321
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDeclMult RBRACE . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [StructType -> STRUCT LBRACE FieldDeclMult RBRACE] with ['struct','{',<list @ 0x7f01ebb6a648>,'}'] and goto state 60
Result : <list @ 0x7f01ebb6a548> (['StructType', ['struct'], ['{'], ['Fiel ...)
State  : 60
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT StructType . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeLit -> StructType] with [<list @ 0x7f01ebb6a548>] and goto state 56
Result : <list @ 0x7f01ebbf8608> (['TypeLit', ['StructType', ['struct'], [ ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT TypeLit . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01ebbf8608>] and goto state 79
Result : <list @ 0x7f01ebbf8648> (['Type', ['TypeLit', ['StructType', ['st ...)
State  : 79
Defaulted state 79: Reduce using 151
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT Type . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Typedef -> IDENT Type] with ['Node',<list @ 0x7f01ebbf8648>] and goto state 41
Result : <list @ 0x7f01ebbf8748> (['TypeDef', ['Node'], ['Type', ['TypeLit ...)
State  : 41
Defaulted state 41: Reduce using 149
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE Typedef . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeSpec -> Typedef] with [<list @ 0x7f01ebbf8748>] and goto state 38
Result : <list @ 0x7f01ebbf8888> (['TypeSpec', ['TypeDef', ['Node'], ['Typ ...)
State  : 38
Defaulted state 38: Reduce using 144
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE TypeSpec . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeDecl -> TYPE TypeSpec] with ['type',<list @ 0x7f01ebbf8888>] and goto state 16
Result : <list @ 0x7f01ebbf8908> (['TypeDecl', ['type'], ['TypeSpec', ['Ty ...)
State  : 16
Defaulted state 16: Reduce using 20
Stack  : PackageClause SEMICOLON ImportDeclMult TypeDecl . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Decl -> TypeDecl] with [<list @ 0x7f01ebbf8908>] and goto state 12
Result : <list @ 0x7f01ebbf8848> (['Decl', ['TypeDecl', ['type'], ['TypeSp ...)
State  : 12
Defaulted state 12: Reduce using 16
Stack  : PackageClause SEMICOLON ImportDeclMult Decl . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TopLevelDecl -> Decl] with [<list @ 0x7f01ebbMICOLON FieldDeclMult] with [<list @ 0x7f01eba52748>,';',<list @ 0x7f01eba54408>] and goto state 362
Result : <list @ 0x7f01eba54248> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba520c8>,';',<list @ 0x7f01eba54248>] and goto state 362
Result : <list @ 0x7f01ebc18888> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba51fc8>,';',<list @ 0x7f01ebc18888>] and goto state 362
Result : <list @ 0x7f01ebabb488> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 362
Defaulted state 362: Reduce using 40
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDecl SEMICOLON FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Reduce rule [FieldDeclMult -> FieldDecl SEMICOLON FieldDeclMult] with [<list @ 0x7f01eba51c88>,';',<list @ 0x7f01ebabb488>] and goto state 245
Result : <list @ 0x7f01ebb6a648> (['FieldDeclMult', ['FieldDecl', ['Identi ...)
State  : 245
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDeclMult . LexToken(RBRACE,'}',15,1,189)
Action : Shift and goto state 321
State  : 321
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT STRUCT LBRACE FieldDeclMult RBRACE . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [StructType -> STRUCT LBRACE FieldDeclMult RBRACE] with ['struct','{',<list @ 0x7f01ebb6a648>,'}'] and goto state 60
Result : <list @ 0x7f01ebb6a548> (['StructType', ['struct'], ['{'], ['Fiel ...)
State  : 60
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT StructType . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeLit -> StructType] with [<list @ 0x7f01ebb6a548>] and goto state 56
Result : <list @ 0x7f01ebbf8608> (['TypeLit', ['StructType', ['struct'], [ ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT TypeLit . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01ebbf8608>] and goto state 79
Result : <list @ 0x7f01ebbf8648> (['Type', ['TypeLit', ['StructType', ['st ...)
State  : 79
Defaulted state 79: Reduce using 151
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE IDENT Type . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Typedef -> IDENT Type] with ['Node',<list @ 0x7f01ebbf8648>] and goto state 41
Result : <list @ 0x7f01ebbf8748> (['TypeDef', ['Node'], ['Type', ['TypeLit ...)
State  : 41
Defaulted state 41: Reduce using 149
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE Typedef . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeSpec -> Typedef] with [<list @ 0x7f01ebbf8748>] and goto state 38
Result : <list @ 0x7f01ebbf8888> (['TypeSpec', ['TypeDef', ['Node'], ['Typ ...)
State  : 38
Defaulted state 38: Reduce using 144
Stack  : PackageClause SEMICOLON ImportDeclMult TYPE TypeSpec . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TypeDecl -> TYPE TypeSpec] with ['type',<list @ 0x7f01ebbf8888>] and goto state 16
Result : <list @ 0x7f01ebbf8908> (['TypeDecl', ['type'], ['TypeSpec', ['Ty ...)
State  : 16
Defaulted state 16: Reduce using 20
Stack  : PackageClause SEMICOLON ImportDeclMult TypeDecl . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [Decl -> TypeDecl] with [<list @ 0x7f01ebbf8908>] and goto state 12
Result : <list @ 0x7f01ebbf8848> (['Decl', ['TypeDecl', ['type'], ['TypeSp ...)
State  : 12
Defaulted state 12: Reduce using 16
Stack  : PackageClause SEMICOLON ImportDeclMult Decl . LexToken(SEMICOLON,';',15,2,190)
Action : Reduce rule [TopLevelDecl -> Decl] with [<list @ 0x7f01ebbf8848>] and goto state 11
f8848>] and goto state 11
Result : <list @ 0x7f01ebbf8788> (['TopLevelDecl', ['Decl', ['TypeDecl', [ ...)
State  : 11
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . LexToken(SEMICOLON,';',15,2,190)
Action : Shift and goto state 28
State  : 28
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . LexToken(FUNC,'func',17,1,193)
Action : Shift and goto state 17
State  : 17
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . LexToken(IDENT,'visit',17,6,198)
Action : Shift and goto state 30
State  : 30
Defaulted state 30: Reduce using 162
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC IDENT . None
Action : Reduce rule [FunctionName -> IDENT] with ['visit'] and goto state 29
Result : <list @ 0x7f01eba51cc8> (['FunctionName', ['visit']])
State  : 29
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . LexToken(LPAREN,'(',17,11,203)
Action : Shift and goto state 51
State  : 51
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN . LexToken(IDENT,'nodeptr',17,12,204)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IDENT . LexToken(MUL,'*',17,20,212)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01ebbf8688> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IDENT IdentifierOth . LexToken(MUL,'*',17,20,212)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['nodeptr',<list @ 0x7f01ebbf8688>] and goto state 94
Result : <list @ 0x7f01ebbf8288> (['IdentifierList', ['nodeptr'], ['Identi ...)
State  : 94
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList . LexToken(MUL,'*',17,20,212)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL . LexToken(IDENT,'Node',17,21,213)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL IDENT . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01ebbf8388> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL TypeName . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebbf8388>] and goto state 137
Result : <list @ 0x7f01ebbf8308> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL Type . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01ebbf8308>] and goto state 136
Result : <list @ 0x7f01ebbf88c8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL BaseType . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01ebbf88c8>] and goto state 61
Result : <list @ 0x7f01ebbf8488> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList PointerType . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01ebbf8488>] and goto state 56
Result : <list @ 0x7f01ebbf8248> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList TypeLit . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01ebbf8248>] and goto state 189
Result : <list @ 0x7fResult : <list @ 0x7f01ebbf8788> (['TopLevelDecl', ['Decl', ['TypeDecl', [ ...)
State  : 11
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . LexToken(SEMICOLON,';',15,2,190)
Action : Shift and goto state 28
State  : 28
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . LexToken(FUNC,'func',17,1,193)
Action : Shift and goto state 17
State  : 17
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . LexToken(IDENT,'visit',17,6,198)
Action : Shift and goto state 30
State  : 30
Defaulted state 30: Reduce using 162
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC IDENT . None
Action : Reduce rule [FunctionName -> IDENT] with ['visit'] and goto state 29
Result : <list @ 0x7f01eba51cc8> (['FunctionName', ['visit']])
State  : 29
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . LexToken(LPAREN,'(',17,11,203)
Action : Shift and goto state 51
State  : 51
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN . LexToken(IDENT,'nodeptr',17,12,204)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IDENT . LexToken(MUL,'*',17,20,212)
Action : Reduce rule [IdentifierOth -> <empty>] with [] and goto state 70
Result : <list @ 0x7f01ebbf8688> (['IdentifierOth'])
State  : 70
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IDENT IdentifierOth . LexToken(MUL,'*',17,20,212)
Action : Reduce rule [IdentifierList -> IDENT IdentifierOth] with ['nodeptr',<list @ 0x7f01ebbf8688>] and goto state 94
Result : <list @ 0x7f01ebbf8288> (['IdentifierList', ['nodeptr'], ['Identi ...)
State  : 94
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList . LexToken(MUL,'*',17,20,212)
Action : Shift and goto state 67
State  : 67
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL . LexToken(IDENT,'Node',17,21,213)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL IDENT . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [TypeName -> IDENT] with ['Node'] and goto state 55
Result : <list @ 0x7f01ebbf8388> (['TypeName', ['Node']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL TypeName . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebbf8388>] and goto state 137
Result : <list @ 0x7f01ebbf8308> (['Type', ['TypeName', ['Node']]])
State  : 137
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL Type . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [BaseType -> Type] with [<list @ 0x7f01ebbf8308>] and goto state 136
Result : <list @ 0x7f01ebbf88c8> (['BaseType', ['Type', ['TypeName', ['Nod ...)
State  : 136
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList MUL BaseType . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [PointerType -> MUL BaseType] with ['*',<list @ 0x7f01ebbf88c8>] and goto state 61
Result : <list @ 0x7f01ebbf8488> (['PointerType', ['*'], ['BaseType', ['Ty ...)
State  : 61
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList PointerType . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [TypeLit -> PointerType] with [<list @ 0x7f01ebbf8488>] and goto state 56
Result : <list @ 0x7f01ebbf8248> (['TypeLit', ['PointerType', ['*'], ['Bas ...)
State  : 56
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList TypeLit . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [Type -> TypeLit] with [<list @ 0x7f01ebbf8248>] and goto state 189
Result : <list @ 0x7f01ebfb8c88> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 189
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList Type . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [ParameterDecl -> IdentifierList Type] with [<list @ 0x7f01ebbf8288>,<list @ 0x7f01ebfb8c88>] and goto state 92
Result : <list @ 0x7f01ebfb8448> (['ParameterDecl', ['IdentifierList', ['n ...)
State  : 92
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterDecl . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [ParameterList -> ParameterDecl] with [<list @ 0x7f01ebfb8448>] and goto state 90
Result : <list @ 0x7f01ebfb8708> (['ParameterList', ['ParameterDecl', ['Id ...)
State  : 90
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterList . LexToken(RPAREN,')',17,25,217)
Action : Shift and goto state 186
State  : 186
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterList RPAREN . LexToken(IDENT,'int',17,27,219)
Action : Reduce rule [Parameters -> LPAREN ParameterList RPAREN] with ['(',<list @ 0x7f01ebfb8708>,')'] and goto state 50
Result : <list @ 0x7f01ebfb8348> (['Parameters', ['('], ['ParameterList',  ...)
State  : 50
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters . LexToken(IDENT,'int',17,27,219)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters IDENT . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
Result : <list @ 0x7f01ebf6f808> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters TypeName . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebf6f808>] and goto state 87
Result : <list @ 0x7f01ebf6fdc8> (['Type', ['TypeName', ['int']]])
State  : 87
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters Type . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Result -> Type] with [<list @ 0x7f01ebf6fdc8>] and goto state 86
Result : <list @ 0x7f01ebf83488> (['Result', ['Type', ['TypeName', ['int'] ...)
State  : 86
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters Result . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Signature -> Parameters Result] with [<list @ 0x7f01ebfb8348>,<list @ 0x7f01ebf83488>] and goto state 49
Result : <list @ 0x7f01ebf838c8> (['Signature', ['Parameters', ['('], ['Pa ...)
State  : 49
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . LexToken(LBRACE,'{',17,31,223)
Action : Shift and goto state 84
State  : 84
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . LexToken(IF,'if',18,5,229)
Action : Shift and goto state 176
State  : 176
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF . LexToken(IDENT,'nodeptr',18,8,232)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . LexToken(EQL,'==',18,16,240)
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . LexToken(EQL,'==',18,16,240)
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . error
State  : 176
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelD01ebfb8c88> (['Type', ['TypeLit', ['PointerType', ['* ...)
State  : 189
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN IdentifierList Type . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [ParameterDecl -> IdentifierList Type] with [<list @ 0x7f01ebbf8288>,<list @ 0x7f01ebfb8c88>] and goto state 92
Result : <list @ 0x7f01ebfb8448> (['ParameterDecl', ['IdentifierList', ['n ...)
State  : 92
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterDecl . LexToken(RPAREN,')',17,25,217)
Action : Reduce rule [ParameterList -> ParameterDecl] with [<list @ 0x7f01ebfb8448>] and goto state 90
Result : <list @ 0x7f01ebfb8708> (['ParameterList', ['ParameterDecl', ['Id ...)
State  : 90
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterList . LexToken(RPAREN,')',17,25,217)
Action : Shift and goto state 186
State  : 186
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName LPAREN ParameterList RPAREN . LexToken(IDENT,'int',17,27,219)
Action : Reduce rule [Parameters -> LPAREN ParameterList RPAREN] with ['(',<list @ 0x7f01ebfb8708>,')'] and goto state 50
Result : <list @ 0x7f01ebfb8348> (['Parameters', ['('], ['ParameterList',  ...)
State  : 50
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters . LexToken(IDENT,'int',17,27,219)
Action : Shift and goto state 58
State  : 58
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters IDENT . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [TypeName -> IDENT] with ['int'] and goto state 55
Result : <list @ 0x7f01ebf6f808> (['TypeName', ['int']])
State  : 55
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters TypeName . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Type -> TypeName] with [<list @ 0x7f01ebf6f808>] and goto state 87
Result : <list @ 0x7f01ebf6fdc8> (['Type', ['TypeName', ['int']]])
State  : 87
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters Type . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Result -> Type] with [<list @ 0x7f01ebf6fdc8>] and goto state 86
Result : <list @ 0x7f01ebf83488> (['Result', ['Type', ['TypeName', ['int'] ...)
State  : 86
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Parameters Result . LexToken(LBRACE,'{',17,31,223)
Action : Reduce rule [Signature -> Parameters Result] with [<list @ 0x7f01ebfb8348>,<list @ 0x7f01ebf83488>] and goto state 49
Result : <list @ 0x7f01ebf838c8> (['Signature', ['Parameters', ['('], ['Pa ...)
State  : 49
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . LexToken(LBRACE,'{',17,31,223)
Action : Shift and goto state 84
State  : 84
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . LexToken(IF,'if',18,5,229)
Action : Shift and goto state 176
State  : 176
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF . LexToken(IDENT,'nodeptr',18,8,232)
Action : Shift and goto state 95
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . LexToken(EQL,'==',18,16,240)
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . LexToken(EQL,'==',18,16,240)
State  : 95
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF IDENT . error
State  : 176
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE IF . error
ecl SEMICOLON FUNC FunctionName Signature LBRACE IF . error
State  : 84
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . error
State  : 49
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . error
State  : 29
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . error
State  : 17
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . error
State  : 28
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . error
State  : 11
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . error
State  : 7
Stack  : PackageClause SEMICOLON ImportDeclMult . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult . error
State  : 4
Stack  : PackageClause SEMICOLON . error
ERROR: Error  : PackageClause SEMICOLON . error
State  : 2
Stack  : PackageClause . error
ERROR: Error  : PackageClause . error
State  : 0
Stack  : . error
ERROR: Error  : . error
State  : 0
Stack  : . LexToken(IDENT,'nil',18,19,243)
ERROR: Error  : . LexToken(IDENT,'nil',18,19,243)
State  : 0
Stack  : . LexToken(LBRACE,'{',18,23,247)
ERROR: Error  : . LexToken(LBRACE,'{',18,23,247)
State  : 0
Stack  : . LexToken(RETURN,'return',19,9,257)
ERROR: Error  : . LexToken(RETURN,'return',19,9,257)
State  : 0
Stack  : . LexToken(INT,'0',19,16,264)
ERROR: Error  : . LexToken(INT,'0',19,16,264)
State  : 0
Stack  : . LexToken(SEMICOLON,';',19,17,265)
ERROR: Error  : . LexToken(SEMICOLON,';',19,17,265)
State  : 0
Stack  : . LexToken(RBRACE,'}',20,5,271)
ERROR: Error  : . LexToken(RBRACE,'}',20,5,271)
State  : 0
Stack  : . LexToken(SEMICOLON,';',20,6,272)
ERROR: Error  : . LexToken(SEMICOLON,';',20,6,272)
State  : 0
Stack  : . LexToken(IDENT,'node',21,5,278)
ERROR: Error  : . LexToken(IDENT,'node',21,5,278)
State  : 0
Stack  : . LexToken(DEFINE,':=',21,10,283)
ERROR: Error  : . LexToken(DEFINE,':=',21,10,283)
State  : 0
Stack  : . LexToken(MUL,'*',21,13,286)
ERROR: Error  : . LexToken(MUL,'*',21,13,286)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',21,14,287)
ERROR: Error  : . LexToken(IDENT,'nodeptr',21,14,287)
State  : 0
Stack  : . LexToken(SEMICOLON,';',21,21,294)
ERROR: Error  : . LexToken(SEMICOLON,';',21,21,294)
State  : 0
Stack  : . LexToken(LPAREN,'(',22,5,300)
ERROR: Error  : . LexToken(LPAREN,'(',22,5,300)
State  : 0
Stack  : . LexToken(MUL,'*',22,6,301)
ERROR: Error  : . LexToken(MUL,'*',22,6,301)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',22,7,302)
ERROR: Error  : . LexToken(IDENT,'nodeptr',22,7,302)
State  : 0
Stack  : . LexToken(RPAREN,')',22,14,309)
ERROR: Error  : . LexToken(RPAREN,')',22,14,309)
State  : 0
Stack  : . LexToken(PERIOD,'.',22,15,310)
ERROR: Error  : . LexToken(PERIOD,'.',22,15,310)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',22,16,311)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',22,16,311)
State  : 0
Stack  : . LexToken(ADD_ASSIGN,'+=',22,29,324)
ERROR: Error  : . LexToken(ADD_ASSIGN,'+=',22,29,324)
State  : 0
Stack  : . LexToken(IDENT,'visit',22,32,327)
ERROR: Error  : . LexToken(IDENT,'visit',22,32,327)
State  : 0
Stack  : . LexToken(LPAREN,'(',22,37,332)
ERROR: Error  : . LexToken(LPAREN,'(',22,37,332)
State  : 0
Stack  : . LexToken(IDENT,'node',22,38,333)
ERROR: Error  : . LexToken(IDENT,'node',22,38,333)
State  : 0
Stack  : . LexToken(PERIOD,'.',22,42,337)
ERROR: Error  : . LexToken(PERIOD,'.',22,42,337)
State  : 0
Stack  : . LexToken(IDENT,'left',22,43,338)
ERROR: Error  : . LexToken(IDENT,'left',22,43,338)
State  : 84
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature LBRACE . error
State  : 49
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName Signature . error
State  : 29
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC FunctionName . error
State  : 17
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON FUNC . error
State  : 28
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl SEMICOLON . error
State  : 11
Stack  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult TopLevelDecl . error
State  : 7
Stack  : PackageClause SEMICOLON ImportDeclMult . error
ERROR: Error  : PackageClause SEMICOLON ImportDeclMult . error
State  : 4
Stack  : PackageClause SEMICOLON . error
ERROR: Error  : PackageClause SEMICOLON . error
State  : 2
Stack  : PackageClause . error
ERROR: Error  : PackageClause . error
State  : 0
Stack  : . error
ERROR: Error  : . error
State  : 0
Stack  : . LexToken(IDENT,'nil',18,19,243)
ERROR: Error  : . LexToken(IDENT,'nil',18,19,243)
State  : 0
Stack  : . LexToken(LBRACE,'{',18,23,247)
ERROR: Error  : . LexToken(LBRACE,'{',18,23,247)
State  : 0
Stack  : . LexToken(RETURN,'return',19,9,257)
ERROR: Error  : . LexToken(RETURN,'return',19,9,257)
State  : 0
Stack  : . LexToken(INT,'0',19,16,264)
ERROR: Error  : . LexToken(INT,'0',19,16,264)
State  : 0
Stack  : . LexToken(SEMICOLON,';',19,17,265)
ERROR: Error  : . LexToken(SEMICOLON,';',19,17,265)
State  : 0
Stack  : . LexToken(RBRACE,'}',20,5,271)
ERROR: Error  : . LexToken(RBRACE,'}',20,5,271)
State  : 0
Stack  : . LexToken(SEMICOLON,';',20,6,272)
ERROR: Error  : . LexToken(SEMICOLON,';',20,6,272)
State  : 0
Stack  : . LexToken(IDENT,'node',21,5,278)
ERROR: Error  : . LexToken(IDENT,'node',21,5,278)
State  : 0
Stack  : . LexToken(DEFINE,':=',21,10,283)
ERROR: Error  : . LexToken(DEFINE,':=',21,10,283)
State  : 0
Stack  : . LexToken(MUL,'*',21,13,286)
ERROR: Error  : . LexToken(MUL,'*',21,13,286)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',21,14,287)
ERROR: Error  : . LexToken(IDENT,'nodeptr',21,14,287)
State  : 0
Stack  : . LexToken(SEMICOLON,';',21,21,294)
ERROR: Error  : . LexToken(SEMICOLON,';',21,21,294)
State  : 0
Stack  : . LexToken(LPAREN,'(',22,5,300)
ERROR: Error  : . LexToken(LPAREN,'(',22,5,300)
State  : 0
Stack  : . LexToken(MUL,'*',22,6,301)
ERROR: Error  : . LexToken(MUL,'*',22,6,301)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',22,7,302)
ERROR: Error  : . LexToken(IDENT,'nodeptr',22,7,302)
State  : 0
Stack  : . LexToken(RPAREN,')',22,14,309)
ERROR: Error  : . LexToken(RPAREN,')',22,14,309)
State  : 0
Stack  : . LexToken(PERIOD,'.',22,15,310)
ERROR: Error  : . LexToken(PERIOD,'.',22,15,310)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',22,16,311)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',22,16,311)
State  : 0
Stack  : . LexToken(ADD_ASSIGN,'+=',22,29,324)
ERROR: Error  : . LexToken(ADD_ASSIGN,'+=',22,29,324)
State  : 0
Stack  : . LexToken(IDENT,'visit',22,32,327)
ERROR: Error  : . LexToken(IDENT,'visit',22,32,327)
State  : 0
Stack  : . LexToken(LPAREN,'(',22,37,332)
ERROR: Error  : . LexToken(LPAREN,'(',22,37,332)
State  : 0
Stack  : . LexToken(IDENT,'node',22,38,333)
ERROR: Error  : . LexToken(IDENT,'node',22,38,333)
State  : 0
Stack  : . LexToken(PERIOD,'.',22,42,337)
ERROR: Error  : . LexToken(PERIOD,'.',22,42,337)
State  : 0
Stack  : . LexToken(IDENT,'left',22,43,338)
ERROR: Error  : . LexToken(IDENT,'left',22,43,338)
State  : 0
Stack  : . LexToken(RPAREN,')',22,47,342)
ERROR: Error  : . LexToken(RPAREN,')',22,47,342)
State  : 0
Stack  : . LexToken(SEMICOLON,';',22,48,343)
ERROR: Error  : . LexToken(SEMICOLON,';',22,48,343)
State  : 0
Stack  : . LexToken(IF,'if',23,5,349)
ERROR: Error  : . LexToken(IF,'if',23,5,349)
State  : 0
Stack  : . LexToken(IDENT,'node',23,8,352)
ERROR: Error  : . LexToken(IDENT,'node',23,8,352)
State  : 0
Stack  : . LexToken(PERIOD,'.',23,12,356)
ERROR: Error  : . LexToken(PERIOD,'.',23,12,356)
State  : 0
Stack  : . LexToken(IDENT,'flag',23,13,357)
ERROR: Error  : . LexToken(IDENT,'flag',23,13,357)
State  : 0
Stack  : . LexToken(LBRACE,'{',23,18,362)
ERROR: Error  : . LexToken(LBRACE,'{',23,18,362)
State  : 0
Stack  : . LexToken(LPAREN,'(',24,9,372)
ERROR: Error  : . LexToken(LPAREN,'(',24,9,372)
State  : 0
Stack  : . LexToken(MUL,'*',24,10,373)
ERROR: Error  : . LexToken(MUL,'*',24,10,373)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',24,11,374)
ERROR: Error  : . LexToken(IDENT,'nodeptr',24,11,374)
State  : 0
Stack  : . LexToken(RPAREN,')',24,18,381)
ERROR: Error  : . LexToken(RPAREN,')',24,18,381)
State  : 0
Stack  : . LexToken(PERIOD,'.',24,19,382)
ERROR: Error  : . LexToken(PERIOD,'.',24,19,382)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',24,20,383)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',24,20,383)
State  : 0
Stack  : . LexToken(ADD_ASSIGN,'+=',24,33,396)
ERROR: Error  : . LexToken(ADD_ASSIGN,'+=',24,33,396)
State  : 0
Stack  : . LexToken(IDENT,'visit',24,36,399)
ERROR: Error  : . LexToken(IDENT,'visit',24,36,399)
State  : 0
Stack  : . LexToken(LPAREN,'(',24,41,404)
ERROR: Error  : . LexToken(LPAREN,'(',24,41,404)
State  : 0
Stack  : . LexToken(IDENT,'node',24,42,405)
ERROR: Error  : . LexToken(IDENT,'node',24,42,405)
State  : 0
Stack  : . LexToken(PERIOD,'.',24,46,409)
ERROR: Error  : . LexToken(PERIOD,'.',24,46,409)
State  : 0
Stack  : . LexToken(IDENT,'right',24,47,410)
ERROR: Error  : . LexToken(IDENT,'right',24,47,410)
State  : 0
Stack  : . LexToken(RPAREN,')',24,52,415)
ERROR: Error  : . LexToken(RPAREN,')',24,52,415)
State  : 0
Stack  : . LexToken(SEMICOLON,';',24,53,416)
ERROR: Error  : . LexToken(SEMICOLON,';',24,53,416)
State  : 0
Stack  : . LexToken(RBRACE,'}',25,5,422)
ERROR: Error  : . LexToken(RBRACE,'}',25,5,422)
State  : 0
Stack  : . LexToken(ELSE,'else',25,7,424)
ERROR: Error  : . LexToken(ELSE,'else',25,7,424)
State  : 0
Stack  : . LexToken(LBRACE,'{',25,12,429)
ERROR: Error  : . LexToken(LBRACE,'{',25,12,429)
State  : 0
Stack  : . LexToken(LPAREN,'(',26,9,439)
ERROR: Error  : . LexToken(LPAREN,'(',26,9,439)
State  : 0
Stack  : . LexToken(MUL,'*',26,10,440)
ERROR: Error  : . LexToken(MUL,'*',26,10,440)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',26,11,441)
ERROR: Error  : . LexToken(IDENT,'nodeptr',26,11,441)
State  : 0
Stack  : . LexToken(RPAREN,')',26,18,448)
ERROR: Error  : . LexToken(RPAREN,')',26,18,448)
State  : 0
Stack  : . LexToken(PERIOD,'.',26,19,449)
ERROR: Error  : . LexToken(PERIOD,'.',26,19,449)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',26,20,450)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',26,20,450)
State  : 0
Stack  : . LexToken(SUB_ASSIGN,'-=',26,33,463)
ERROR: Error  : . LexToken(SUB_ASSIGN,'-=',26,33,463)
State  : 0
Stack  : . LexToken(IDENT,'visit',26,36,466)
ERROR: Error  : . LexToken(IDENT,'visit',26,36,466)
State  : 0
Stack  : . LexToken(LPAREN,'(',26,41,471)
ERROR: Error  : . LexToken(LPAREN,'(',26,41,471)
State  : 0
Stack  : . LexToken(IDENT,'node',26,42,472)
ERROR: Error  : . LexToken(IDENT,'node',26,42,472)
State  : 0
Stack  : . LexToken(PERIOD,'.',26,46,476)
ERROR: Error  : . LexToken(PERIOD,'.',26,46,476)
State  : 0
Stack  : . LexToken(IDENT,'right',26,47,477)
ERROR: Error  : . LexToken(IDENT,'right',26,47,477)
State  : 0
Stack  : . LexToken(RPAREN,')',26,52,482)
ERROR: Error  : . LexToken(RPAREN,')',26,52,482)
State  : 0
Stack  : . LexToken(SEMICOLON,';',26,53,483)
ERROR: Error  : . LexToken(SEMICOLON,';',26,53,483)
State  : 0
Stack  : . LexToken(RBRACE,'}',27,5,489)
ERROR: Error  : . LexToken(RBRACE,'}',27,5,489)
State State  : 0
Stack  : . LexToken(RPAREN,')',22,47,342)
ERROR: Error  : . LexToken(RPAREN,')',22,47,342)
State  : 0
Stack  : . LexToken(SEMICOLON,';',22,48,343)
ERROR: Error  : . LexToken(SEMICOLON,';',22,48,343)
State  : 0
Stack  : . LexToken(IF,'if',23,5,349)
ERROR: Error  : . LexToken(IF,'if',23,5,349)
State  : 0
Stack  : . LexToken(IDENT,'node',23,8,352)
ERROR: Error  : . LexToken(IDENT,'node',23,8,352)
State  : 0
Stack  : . LexToken(PERIOD,'.',23,12,356)
ERROR: Error  : . LexToken(PERIOD,'.',23,12,356)
State  : 0
Stack  : . LexToken(IDENT,'flag',23,13,357)
ERROR: Error  : . LexToken(IDENT,'flag',23,13,357)
State  : 0
Stack  : . LexToken(LBRACE,'{',23,18,362)
ERROR: Error  : . LexToken(LBRACE,'{',23,18,362)
State  : 0
Stack  : . LexToken(LPAREN,'(',24,9,372)
ERROR: Error  : . LexToken(LPAREN,'(',24,9,372)
State  : 0
Stack  : . LexToken(MUL,'*',24,10,373)
ERROR: Error  : . LexToken(MUL,'*',24,10,373)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',24,11,374)
ERROR: Error  : . LexToken(IDENT,'nodeptr',24,11,374)
State  : 0
Stack  : . LexToken(RPAREN,')',24,18,381)
ERROR: Error  : . LexToken(RPAREN,')',24,18,381)
State  : 0
Stack  : . LexToken(PERIOD,'.',24,19,382)
ERROR: Error  : . LexToken(PERIOD,'.',24,19,382)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',24,20,383)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',24,20,383)
State  : 0
Stack  : . LexToken(ADD_ASSIGN,'+=',24,33,396)
ERROR: Error  : . LexToken(ADD_ASSIGN,'+=',24,33,396)
State  : 0
Stack  : . LexToken(IDENT,'visit',24,36,399)
ERROR: Error  : . LexToken(IDENT,'visit',24,36,399)
State  : 0
Stack  : . LexToken(LPAREN,'(',24,41,404)
ERROR: Error  : . LexToken(LPAREN,'(',24,41,404)
State  : 0
Stack  : . LexToken(IDENT,'node',24,42,405)
ERROR: Error  : . LexToken(IDENT,'node',24,42,405)
State  : 0
Stack  : . LexToken(PERIOD,'.',24,46,409)
ERROR: Error  : . LexToken(PERIOD,'.',24,46,409)
State  : 0
Stack  : . LexToken(IDENT,'right',24,47,410)
ERROR: Error  : . LexToken(IDENT,'right',24,47,410)
State  : 0
Stack  : . LexToken(RPAREN,')',24,52,415)
ERROR: Error  : . LexToken(RPAREN,')',24,52,415)
State  : 0
Stack  : . LexToken(SEMICOLON,';',24,53,416)
ERROR: Error  : . LexToken(SEMICOLON,';',24,53,416)
State  : 0
Stack  : . LexToken(RBRACE,'}',25,5,422)
ERROR: Error  : . LexToken(RBRACE,'}',25,5,422)
State  : 0
Stack  : . LexToken(ELSE,'else',25,7,424)
ERROR: Error  : . LexToken(ELSE,'else',25,7,424)
State  : 0
Stack  : . LexToken(LBRACE,'{',25,12,429)
ERROR: Error  : . LexToken(LBRACE,'{',25,12,429)
State  : 0
Stack  : . LexToken(LPAREN,'(',26,9,439)
ERROR: Error  : . LexToken(LPAREN,'(',26,9,439)
State  : 0
Stack  : . LexToken(MUL,'*',26,10,440)
ERROR: Error  : . LexToken(MUL,'*',26,10,440)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',26,11,441)
ERROR: Error  : . LexToken(IDENT,'nodeptr',26,11,441)
State  : 0
Stack  : . LexToken(RPAREN,')',26,18,448)
ERROR: Error  : . LexToken(RPAREN,')',26,18,448)
State  : 0
Stack  : . LexToken(PERIOD,'.',26,19,449)
ERROR: Error  : . LexToken(PERIOD,'.',26,19,449)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',26,20,450)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',26,20,450)
State  : 0
Stack  : . LexToken(SUB_ASSIGN,'-=',26,33,463)
ERROR: Error  : . LexToken(SUB_ASSIGN,'-=',26,33,463)
State  : 0
Stack  : . LexToken(IDENT,'visit',26,36,466)
ERROR: Error  : . LexToken(IDENT,'visit',26,36,466)
State  : 0
Stack  : . LexToken(LPAREN,'(',26,41,471)
ERROR: Error  : . LexToken(LPAREN,'(',26,41,471)
State  : 0
Stack  : . LexToken(IDENT,'node',26,42,472)
ERROR: Error  : . LexToken(IDENT,'node',26,42,472)
State  : 0
Stack  : . LexToken(PERIOD,'.',26,46,476)
ERROR: Error  : . LexToken(PERIOD,'.',26,46,476)
State  : 0
Stack  : . LexToken(IDENT,'right',26,47,477)
ERROR: Error  : . LexToken(IDENT,'right',26,47,477)
State  : 0
Stack  : . LexToken(RPAREN,')',26,52,482)
ERROR: Error  : . LexToken(RPAREN,')',26,52,482)
State  : 0
Stack  : . LexToken(SEMICOLON,';',26,53,483)
ERROR: Error  : . LexToken(SEMICOLON,';',26,53,483)
State  : 0
Stack  : . LexToken(RBRACE,'}',27,5,489)
ERROR: Error  : . LexToken(RBRACE,'}',27,5,489)
State  : 0
Stack  : . LexToken(SEMICOLON,';',27,6,490)
 : 0
Stack  : . LexToken(SEMICOLON,';',27,6,490)
ERROR: Error  : . LexToken(SEMICOLON,';',27,6,490)
State  : 0
Stack  : . LexToken(IF,'if',28,5,496)
ERROR: Error  : . LexToken(IF,'if',28,5,496)
State  : 0
Stack  : . LexToken(IDENT,'node',28,8,499)
ERROR: Error  : . LexToken(IDENT,'node',28,8,499)
State  : 0
Stack  : . LexToken(PERIOD,'.',28,12,503)
ERROR: Error  : . LexToken(PERIOD,'.',28,12,503)
State  : 0
Stack  : . LexToken(IDENT,'parent',28,13,504)
ERROR: Error  : . LexToken(IDENT,'parent',28,13,504)
State  : 0
Stack  : . LexToken(NEQ,'!=',28,20,511)
ERROR: Error  : . LexToken(NEQ,'!=',28,20,511)
State  : 0
Stack  : . LexToken(IDENT,'nil',28,23,514)
ERROR: Error  : . LexToken(IDENT,'nil',28,23,514)
State  : 0
Stack  : . LexToken(LBRACE,'{',28,26,517)
ERROR: Error  : . LexToken(LBRACE,'{',28,26,517)
State  : 0
Stack  : . LexToken(LPAREN,'(',29,9,527)
ERROR: Error  : . LexToken(LPAREN,'(',29,9,527)
State  : 0
Stack  : . LexToken(MUL,'*',29,10,528)
ERROR: Error  : . LexToken(MUL,'*',29,10,528)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',29,11,529)
ERROR: Error  : . LexToken(IDENT,'nodeptr',29,11,529)
State  : 0
Stack  : . LexToken(RPAREN,')',29,18,536)
ERROR: Error  : . LexToken(RPAREN,')',29,18,536)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,19,537)
ERROR: Error  : . LexToken(PERIOD,'.',29,19,537)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',29,20,538)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',29,20,538)
State  : 0
Stack  : . LexToken(MUL_ASSIGN,'*=',29,33,551)
ERROR: Error  : . LexToken(MUL_ASSIGN,'*=',29,33,551)
State  : 0
Stack  : . LexToken(IDENT,'node',29,36,554)
ERROR: Error  : . LexToken(IDENT,'node',29,36,554)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,40,558)
ERROR: Error  : . LexToken(PERIOD,'.',29,40,558)
State  : 0
Stack  : . LexToken(IDENT,'parent',29,41,559)
ERROR: Error  : . LexToken(IDENT,'parent',29,41,559)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,47,565)
ERROR: Error  : . LexToken(PERIOD,'.',29,47,565)
State  : 0
Stack  : . LexToken(IDENT,'value',29,48,566)
ERROR: Error  : . LexToken(IDENT,'value',29,48,566)
State  : 0
Stack  : . LexToken(SEMICOLON,';',29,53,571)
ERROR: Error  : . LexToken(SEMICOLON,';',29,53,571)
State  : 0
Stack  : . LexToken(RBRACE,'}',30,5,577)
ERROR: Error  : . LexToken(RBRACE,'}',30,5,577)
State  : 0
Stack  : . LexToken(SEMICOLON,';',30,6,578)
ERROR: Error  : . LexToken(SEMICOLON,';',30,6,578)
State  : 0
Stack  : . LexToken(RETURN,'return',31,5,584)
ERROR: Error  : . LexToken(RETURN,'return',31,5,584)
State  : 0
Stack  : . LexToken(LPAREN,'(',31,12,591)
ERROR: Error  : . LexToken(LPAREN,'(',31,12,591)
State  : 0
Stack  : . LexToken(MUL,'*',31,13,592)
ERROR: Error  : . LexToken(MUL,'*',31,13,592)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',31,14,593)
ERROR: Error  : . LexToken(IDENT,'nodeptr',31,14,593)
State  : 0
Stack  : . LexToken(RPAREN,')',31,21,600)
ERROR: Error  : . LexToken(RPAREN,')',31,21,600)
State  : 0
Stack  : . LexToken(PERIOD,'.',31,22,601)
ERROR: Error  : . LexToken(PERIOD,'.',31,22,601)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',31,23,602)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',31,23,602)
State  : 0
Stack  : . LexToken(SEMICOLON,';',31,35,614)
ERROR: Error  : . LexToken(SEMICOLON,';',31,35,614)
State  : 0
Stack  : . LexToken(RBRACE,'}',32,1,616)
ERROR: Error  : . LexToken(RBRACE,'}',32,1,616)
State  : 0
Stack  : . LexToken(SEMICOLON,';',32,2,617)
ERROR: Error  : . LexToken(SEMICOLON,';',32,2,617)
State  : 0
Stack  : . LexToken(FUNC,'func',34,1,620)
ERROR: Error  : . LexToken(FUNC,'func',34,1,620)
State  : 0
Stack  : . LexToken(IDENT,'main',34,6,625)
ERROR: Error  : . LexToken(IDENT,'main',34,6,625)
State  : 0
Stack  : . LexToken(LPAREN,'(',34,10,629)
ERROR: Error  : . LexToken(LPAREN,'(',34,10,629)
State  : 0
Stack  : . LexToken(RPAREN,')',34,11,630)
ERROR: Error  : . LexToken(RPAREN,')',34,11,630)
State  : 0
Stack  : . LexToken(LBRACE,'{',34,12,631)
ERROR: Error  : . LexToken(LBRACE,'{',34,12,631)
State  : 0
Stack  : . LexToken(VAR,'var',35,5,637)
ERROR: Error  : . LexToken(VAR,'var',35,5,637)
State  : 0
Stack  : . LexToken(IDENT,'n',35,9,641)
ERROR: Error  : . ERROR: Error  : . LexToken(SEMICOLON,';',27,6,490)
State  : 0
Stack  : . LexToken(IF,'if',28,5,496)
ERROR: Error  : . LexToken(IF,'if',28,5,496)
State  : 0
Stack  : . LexToken(IDENT,'node',28,8,499)
ERROR: Error  : . LexToken(IDENT,'node',28,8,499)
State  : 0
Stack  : . LexToken(PERIOD,'.',28,12,503)
ERROR: Error  : . LexToken(PERIOD,'.',28,12,503)
State  : 0
Stack  : . LexToken(IDENT,'parent',28,13,504)
ERROR: Error  : . LexToken(IDENT,'parent',28,13,504)
State  : 0
Stack  : . LexToken(NEQ,'!=',28,20,511)
ERROR: Error  : . LexToken(NEQ,'!=',28,20,511)
State  : 0
Stack  : . LexToken(IDENT,'nil',28,23,514)
ERROR: Error  : . LexToken(IDENT,'nil',28,23,514)
State  : 0
Stack  : . LexToken(LBRACE,'{',28,26,517)
ERROR: Error  : . LexToken(LBRACE,'{',28,26,517)
State  : 0
Stack  : . LexToken(LPAREN,'(',29,9,527)
ERROR: Error  : . LexToken(LPAREN,'(',29,9,527)
State  : 0
Stack  : . LexToken(MUL,'*',29,10,528)
ERROR: Error  : . LexToken(MUL,'*',29,10,528)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',29,11,529)
ERROR: Error  : . LexToken(IDENT,'nodeptr',29,11,529)
State  : 0
Stack  : . LexToken(RPAREN,')',29,18,536)
ERROR: Error  : . LexToken(RPAREN,')',29,18,536)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,19,537)
ERROR: Error  : . LexToken(PERIOD,'.',29,19,537)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',29,20,538)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',29,20,538)
State  : 0
Stack  : . LexToken(MUL_ASSIGN,'*=',29,33,551)
ERROR: Error  : . LexToken(MUL_ASSIGN,'*=',29,33,551)
State  : 0
Stack  : . LexToken(IDENT,'node',29,36,554)
ERROR: Error  : . LexToken(IDENT,'node',29,36,554)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,40,558)
ERROR: Error  : . LexToken(PERIOD,'.',29,40,558)
State  : 0
Stack  : . LexToken(IDENT,'parent',29,41,559)
ERROR: Error  : . LexToken(IDENT,'parent',29,41,559)
State  : 0
Stack  : . LexToken(PERIOD,'.',29,47,565)
ERROR: Error  : . LexToken(PERIOD,'.',29,47,565)
State  : 0
Stack  : . LexToken(IDENT,'value',29,48,566)
ERROR: Error  : . LexToken(IDENT,'value',29,48,566)
State  : 0
Stack  : . LexToken(SEMICOLON,';',29,53,571)
ERROR: Error  : . LexToken(SEMICOLON,';',29,53,571)
State  : 0
Stack  : . LexToken(RBRACE,'}',30,5,577)
ERROR: Error  : . LexToken(RBRACE,'}',30,5,577)
State  : 0
Stack  : . LexToken(SEMICOLON,';',30,6,578)
ERROR: Error  : . LexToken(SEMICOLON,';',30,6,578)
State  : 0
Stack  : . LexToken(RETURN,'return',31,5,584)
ERROR: Error  : . LexToken(RETURN,'return',31,5,584)
State  : 0
Stack  : . LexToken(LPAREN,'(',31,12,591)
ERROR: Error  : . LexToken(LPAREN,'(',31,12,591)
State  : 0
Stack  : . LexToken(MUL,'*',31,13,592)
ERROR: Error  : . LexToken(MUL,'*',31,13,592)
State  : 0
Stack  : . LexToken(IDENT,'nodeptr',31,14,593)
ERROR: Error  : . LexToken(IDENT,'nodeptr',31,14,593)
State  : 0
Stack  : . LexToken(RPAREN,')',31,21,600)
ERROR: Error  : . LexToken(RPAREN,')',31,21,600)
State  : 0
Stack  : . LexToken(PERIOD,'.',31,22,601)
ERROR: Error  : . LexToken(PERIOD,'.',31,22,601)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',31,23,602)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',31,23,602)
State  : 0
Stack  : . LexToken(SEMICOLON,';',31,35,614)
ERROR: Error  : . LexToken(SEMICOLON,';',31,35,614)
State  : 0
Stack  : . LexToken(RBRACE,'}',32,1,616)
ERROR: Error  : . LexToken(RBRACE,'}',32,1,616)
State  : 0
Stack  : . LexToken(SEMICOLON,';',32,2,617)
ERROR: Error  : . LexToken(SEMICOLON,';',32,2,617)
State  : 0
Stack  : . LexToken(FUNC,'func',34,1,620)
ERROR: Error  : . LexToken(FUNC,'func',34,1,620)
State  : 0
Stack  : . LexToken(IDENT,'main',34,6,625)
ERROR: Error  : . LexToken(IDENT,'main',34,6,625)
State  : 0
Stack  : . LexToken(LPAREN,'(',34,10,629)
ERROR: Error  : . LexToken(LPAREN,'(',34,10,629)
State  : 0
Stack  : . LexToken(RPAREN,')',34,11,630)
ERROR: Error  : . LexToken(RPAREN,')',34,11,630)
State  : 0
Stack  : . LexToken(LBRACE,'{',34,12,631)
ERROR: Error  : . LexToken(LBRACE,'{',34,12,631)
State  : 0
Stack  : . LexToken(VAR,'var',35,5,637)
ERROR: Error  : . LexToken(VAR,'var',35,5,637)
State  : 0
Stack  : . LexToken(IDENT,'n',35,9,641)
ERROR: Error  : . LexToken(IDENT,'n',35,9,641)
State  : 0
Stack  : . LexToken(IDENT,'int',35,11,643)
ERROR: Error  : . LexToken(IDENT,'int',35,11,643)
State  : 0
Stack  : . LexToken(ASSIGN,'=',35,15,647)
ERROR: Error  : . LexToken(ASSIGN,'=',35,15,647)
State  : 0
Stack  : . LexToken(INT,'20',35,17,649)
ERROR: Error  : . LexToken(INT,'20',35,17,649)
State  : 0
Stack  : . LexToken(SEMICOLON,';',35,19,651)
ERROR: Error  : . LexToken(SEMICOLON,';',35,19,651)
State  : 0
Stack  : . LexToken(VAR,'var',36,5,657)
ERROR: Error  : . LexToken(VAR,'var',36,5,657)
State  : 0
Stack  : . LexToken(IDENT,'max_val',36,9,661)
ERROR: Error  : . LexToken(IDENT,'max_val',36,9,661)
State  : 0
Stack  : . LexToken(IDENT,'int',36,17,669)
ERROR: Error  : . LexToken(IDENT,'int',36,17,669)
State  : 0
Stack  : . LexToken(ASSIGN,'=',36,21,673)
ERROR: Error  : . LexToken(ASSIGN,'=',36,21,673)
State  : 0
Stack  : . LexToken(INT,'100',36,23,675)
ERROR: Error  : . LexToken(INT,'100',36,23,675)
State  : 0
Stack  : . LexToken(SEMICOLON,';',36,26,678)
ERROR: Error  : . LexToken(SEMICOLON,';',36,26,678)
State  : 0
Stack  : . LexToken(IDENT,'graph',37,5,684)
ERROR: Error  : . LexToken(IDENT,'graph',37,5,684)
State  : 0
Stack  : . LexToken(DEFINE,':=',37,11,690)
ERROR: Error  : . LexToken(DEFINE,':=',37,11,690)
State  : 0
Stack  : . LexToken(IDENT,'make',37,14,693)
ERROR: Error  : . LexToken(IDENT,'make',37,14,693)
State  : 0
Stack  : . LexToken(LPAREN,'(',37,18,697)
ERROR: Error  : . LexToken(LPAREN,'(',37,18,697)
State  : 0
Stack  : . LexToken(LBRACK,'[',37,19,698)
ERROR: Error  : . LexToken(LBRACK,'[',37,19,698)
State  : 0
Stack  : . LexToken(RBRACK,']',37,20,699)
ERROR: Error  : . LexToken(RBRACK,']',37,20,699)
State  : 0
Stack  : . LexToken(IDENT,'Node',37,21,700)
ERROR: Error  : . LexToken(IDENT,'Node',37,21,700)
State  : 0
Stack  : . LexToken(COMMA,',',37,25,704)
ERROR: Error  : . LexToken(COMMA,',',37,25,704)
State  : 0
Stack  : . LexToken(IDENT,'n',37,27,706)
ERROR: Error  : . LexToken(IDENT,'n',37,27,706)
State  : 0
Stack  : . LexToken(ADD,'+',37,28,707)
ERROR: Error  : . LexToken(ADD,'+',37,28,707)
State  : 0
Stack  : . LexToken(INT,'1',37,29,708)
ERROR: Error  : . LexToken(INT,'1',37,29,708)
State  : 0
Stack  : . LexToken(RPAREN,')',37,30,709)
ERROR: Error  : . LexToken(RPAREN,')',37,30,709)
State  : 0
Stack  : . LexToken(SEMICOLON,';',37,31,710)
ERROR: Error  : . LexToken(SEMICOLON,';',37,31,710)
State  : 0
Stack  : . LexToken(IDENT,'rand',38,5,716)
ERROR: Error  : . LexToken(IDENT,'rand',38,5,716)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,9,720)
ERROR: Error  : . LexToken(PERIOD,'.',38,9,720)
State  : 0
Stack  : . LexToken(IDENT,'Seed',38,10,721)
ERROR: Error  : . LexToken(IDENT,'Seed',38,10,721)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,14,725)
ERROR: Error  : . LexToken(LPAREN,'(',38,14,725)
State  : 0
Stack  : . LexToken(IDENT,'time',38,15,726)
ERROR: Error  : . LexToken(IDENT,'time',38,15,726)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,19,730)
ERROR: Error  : . LexToken(PERIOD,'.',38,19,730)
State  : 0
Stack  : . LexToken(IDENT,'Now',38,20,731)
ERROR: Error  : . LexToken(IDENT,'Now',38,20,731)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,23,734)
ERROR: Error  : . LexToken(LPAREN,'(',38,23,734)
State  : 0
Stack  : . LexToken(RPAREN,')',38,24,735)
ERROR: Error  : . LexToken(RPAREN,')',38,24,735)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,25,736)
ERROR: Error  : . LexToken(PERIOD,'.',38,25,736)
State  : 0
Stack  : . LexToken(IDENT,'UnixNano',38,26,737)
ERROR: Error  : . LexToken(IDENT,'UnixNano',38,26,737)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,34,745)
ERROR: Error  : . LexToken(LPAREN,'(',38,34,745)
State  : 0
Stack  : . LexToken(RPAREN,')',38,35,746)
ERROR: Error  : . LexToken(RPAREN,')',38,35,746)
State  : 0
Stack  : . LexToken(RPAREN,')',38,36,747)
ERROR: Error  : . LexToken(RPAREN,')',38,36,747)
State  : 0
Stack  : . LexToken(SEMICOLON,';',38,37,748)
ERROR: Error  : . LexToken(SEMICOLON,';',38,37,748)
State  : 0
Stack  : . LexToken(FOR,'for',40,5,798)
ERROR: Error  : . LexToken(FOR,'for',40,5,798)
State  : 0
Stack  : . LexToken(IDENT,'i',40LexToken(IDENT,'n',35,9,641)
State  : 0
Stack  : . LexToken(IDENT,'int',35,11,643)
ERROR: Error  : . LexToken(IDENT,'int',35,11,643)
State  : 0
Stack  : . LexToken(ASSIGN,'=',35,15,647)
ERROR: Error  : . LexToken(ASSIGN,'=',35,15,647)
State  : 0
Stack  : . LexToken(INT,'20',35,17,649)
ERROR: Error  : . LexToken(INT,'20',35,17,649)
State  : 0
Stack  : . LexToken(SEMICOLON,';',35,19,651)
ERROR: Error  : . LexToken(SEMICOLON,';',35,19,651)
State  : 0
Stack  : . LexToken(VAR,'var',36,5,657)
ERROR: Error  : . LexToken(VAR,'var',36,5,657)
State  : 0
Stack  : . LexToken(IDENT,'max_val',36,9,661)
ERROR: Error  : . LexToken(IDENT,'max_val',36,9,661)
State  : 0
Stack  : . LexToken(IDENT,'int',36,17,669)
ERROR: Error  : . LexToken(IDENT,'int',36,17,669)
State  : 0
Stack  : . LexToken(ASSIGN,'=',36,21,673)
ERROR: Error  : . LexToken(ASSIGN,'=',36,21,673)
State  : 0
Stack  : . LexToken(INT,'100',36,23,675)
ERROR: Error  : . LexToken(INT,'100',36,23,675)
State  : 0
Stack  : . LexToken(SEMICOLON,';',36,26,678)
ERROR: Error  : . LexToken(SEMICOLON,';',36,26,678)
State  : 0
Stack  : . LexToken(IDENT,'graph',37,5,684)
ERROR: Error  : . LexToken(IDENT,'graph',37,5,684)
State  : 0
Stack  : . LexToken(DEFINE,':=',37,11,690)
ERROR: Error  : . LexToken(DEFINE,':=',37,11,690)
State  : 0
Stack  : . LexToken(IDENT,'make',37,14,693)
ERROR: Error  : . LexToken(IDENT,'make',37,14,693)
State  : 0
Stack  : . LexToken(LPAREN,'(',37,18,697)
ERROR: Error  : . LexToken(LPAREN,'(',37,18,697)
State  : 0
Stack  : . LexToken(LBRACK,'[',37,19,698)
ERROR: Error  : . LexToken(LBRACK,'[',37,19,698)
State  : 0
Stack  : . LexToken(RBRACK,']',37,20,699)
ERROR: Error  : . LexToken(RBRACK,']',37,20,699)
State  : 0
Stack  : . LexToken(IDENT,'Node',37,21,700)
ERROR: Error  : . LexToken(IDENT,'Node',37,21,700)
State  : 0
Stack  : . LexToken(COMMA,',',37,25,704)
ERROR: Error  : . LexToken(COMMA,',',37,25,704)
State  : 0
Stack  : . LexToken(IDENT,'n',37,27,706)
ERROR: Error  : . LexToken(IDENT,'n',37,27,706)
State  : 0
Stack  : . LexToken(ADD,'+',37,28,707)
ERROR: Error  : . LexToken(ADD,'+',37,28,707)
State  : 0
Stack  : . LexToken(INT,'1',37,29,708)
ERROR: Error  : . LexToken(INT,'1',37,29,708)
State  : 0
Stack  : . LexToken(RPAREN,')',37,30,709)
ERROR: Error  : . LexToken(RPAREN,')',37,30,709)
State  : 0
Stack  : . LexToken(SEMICOLON,';',37,31,710)
ERROR: Error  : . LexToken(SEMICOLON,';',37,31,710)
State  : 0
Stack  : . LexToken(IDENT,'rand',38,5,716)
ERROR: Error  : . LexToken(IDENT,'rand',38,5,716)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,9,720)
ERROR: Error  : . LexToken(PERIOD,'.',38,9,720)
State  : 0
Stack  : . LexToken(IDENT,'Seed',38,10,721)
ERROR: Error  : . LexToken(IDENT,'Seed',38,10,721)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,14,725)
ERROR: Error  : . LexToken(LPAREN,'(',38,14,725)
State  : 0
Stack  : . LexToken(IDENT,'time',38,15,726)
ERROR: Error  : . LexToken(IDENT,'time',38,15,726)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,19,730)
ERROR: Error  : . LexToken(PERIOD,'.',38,19,730)
State  : 0
Stack  : . LexToken(IDENT,'Now',38,20,731)
ERROR: Error  : . LexToken(IDENT,'Now',38,20,731)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,23,734)
ERROR: Error  : . LexToken(LPAREN,'(',38,23,734)
State  : 0
Stack  : . LexToken(RPAREN,')',38,24,735)
ERROR: Error  : . LexToken(RPAREN,')',38,24,735)
State  : 0
Stack  : . LexToken(PERIOD,'.',38,25,736)
ERROR: Error  : . LexToken(PERIOD,'.',38,25,736)
State  : 0
Stack  : . LexToken(IDENT,'UnixNano',38,26,737)
ERROR: Error  : . LexToken(IDENT,'UnixNano',38,26,737)
State  : 0
Stack  : . LexToken(LPAREN,'(',38,34,745)
ERROR: Error  : . LexToken(LPAREN,'(',38,34,745)
State  : 0
Stack  : . LexToken(RPAREN,')',38,35,746)
ERROR: Error  : . LexToken(RPAREN,')',38,35,746)
State  : 0
Stack  : . LexToken(RPAREN,')',38,36,747)
ERROR: Error  : . LexToken(RPAREN,')',38,36,747)
State  : 0
Stack  : . LexToken(SEMICOLON,';',38,37,748)
ERROR: Error  : . LexToken(SEMICOLON,';',38,37,748)
State  : 0
Stack  : . LexToken(FOR,'for',40,5,798)
ERROR: Error  : . LexToken(FOR,'for',40,5,798)
State  : 0
Stack  : . LexToken(IDENT,'i',40,9,802)
ERROR: Error  : . LexToken(IDENT,'i',40,9,802)
,9,802)
ERROR: Error  : . LexToken(IDENT,'i',40,9,802)
State  : 0
Stack  : . LexToken(DEFINE,':=',40,11,804)
ERROR: Error  : . LexToken(DEFINE,':=',40,11,804)
State  : 0
Stack  : . LexToken(INT,'1',40,14,807)
ERROR: Error  : . LexToken(INT,'1',40,14,807)
State  : 0
Stack  : . LexToken(SEMICOLON,';',40,15,808)
ERROR: Error  : . LexToken(SEMICOLON,';',40,15,808)
State  : 0
Stack  : . LexToken(IDENT,'i',40,17,810)
ERROR: Error  : . LexToken(IDENT,'i',40,17,810)
State  : 0
Stack  : . LexToken(LEQ,'<=',40,18,811)
ERROR: Error  : . LexToken(LEQ,'<=',40,18,811)
State  : 0
Stack  : . LexToken(IDENT,'n',40,20,813)
ERROR: Error  : . LexToken(IDENT,'n',40,20,813)
State  : 0
Stack  : . LexToken(SEMICOLON,';',40,21,814)
ERROR: Error  : . LexToken(SEMICOLON,';',40,21,814)
State  : 0
Stack  : . LexToken(IDENT,'i',40,23,816)
ERROR: Error  : . LexToken(IDENT,'i',40,23,816)
State  : 0
Stack  : . LexToken(INC,'++',40,24,817)
ERROR: Error  : . LexToken(INC,'++',40,24,817)
State  : 0
Stack  : . LexToken(LBRACE,'{',40,26,819)
ERROR: Error  : . LexToken(LBRACE,'{',40,26,819)
State  : 0
Stack  : . LexToken(IDENT,'graph',41,9,829)
ERROR: Error  : . LexToken(IDENT,'graph',41,9,829)
State  : 0
Stack  : . LexToken(LBRACK,'[',41,14,834)
ERROR: Error  : . LexToken(LBRACK,'[',41,14,834)
State  : 0
Stack  : . LexToken(IDENT,'i',41,15,835)
ERROR: Error  : . LexToken(IDENT,'i',41,15,835)
State  : 0
Stack  : . LexToken(RBRACK,']',41,16,836)
ERROR: Error  : . LexToken(RBRACK,']',41,16,836)
State  : 0
Stack  : . LexToken(PERIOD,'.',41,17,837)
ERROR: Error  : . LexToken(PERIOD,'.',41,17,837)
State  : 0
Stack  : . LexToken(IDENT,'value',41,18,838)
ERROR: Error  : . LexToken(IDENT,'value',41,18,838)
State  : 0
Stack  : . LexToken(ASSIGN,'=',41,24,844)
ERROR: Error  : . LexToken(ASSIGN,'=',41,24,844)
State  : 0
Stack  : . LexToken(IDENT,'rand',41,26,846)
ERROR: Error  : . LexToken(IDENT,'rand',41,26,846)
State  : 0
Stack  : . LexToken(PERIOD,'.',41,30,850)
ERROR: Error  : . LexToken(PERIOD,'.',41,30,850)
State  : 0
Stack  : . LexToken(IDENT,'Intn',41,31,851)
ERROR: Error  : . LexToken(IDENT,'Intn',41,31,851)
State  : 0
Stack  : . LexToken(LPAREN,'(',41,35,855)
ERROR: Error  : . LexToken(LPAREN,'(',41,35,855)
State  : 0
Stack  : . LexToken(IDENT,'max_val',41,36,856)
ERROR: Error  : . LexToken(IDENT,'max_val',41,36,856)
State  : 0
Stack  : . LexToken(RPAREN,')',41,43,863)
ERROR: Error  : . LexToken(RPAREN,')',41,43,863)
State  : 0
Stack  : . LexToken(SEMICOLON,';',41,44,864)
ERROR: Error  : . LexToken(SEMICOLON,';',41,44,864)
State  : 0
Stack  : . LexToken(IDENT,'graph',42,9,874)
ERROR: Error  : . LexToken(IDENT,'graph',42,9,874)
State  : 0
Stack  : . LexToken(LBRACK,'[',42,14,879)
ERROR: Error  : . LexToken(LBRACK,'[',42,14,879)
State  : 0
Stack  : . LexToken(IDENT,'i',42,15,880)
ERROR: Error  : . LexToken(IDENT,'i',42,15,880)
State  : 0
Stack  : . LexToken(RBRACK,']',42,16,881)
ERROR: Error  : . LexToken(RBRACK,']',42,16,881)
State  : 0
Stack  : . LexToken(PERIOD,'.',42,17,882)
ERROR: Error  : . LexToken(PERIOD,'.',42,17,882)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',42,18,883)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',42,18,883)
State  : 0
Stack  : . LexToken(ASSIGN,'=',42,31,896)
ERROR: Error  : . LexToken(ASSIGN,'=',42,31,896)
State  : 0
Stack  : . LexToken(IDENT,'graph',42,33,898)
ERROR: Error  : . LexToken(IDENT,'graph',42,33,898)
State  : 0
Stack  : . LexToken(LBRACK,'[',42,38,903)
ERROR: Error  : . LexToken(LBRACK,'[',42,38,903)
State  : 0
Stack  : . LexToken(IDENT,'i',42,39,904)
ERROR: Error  : . LexToken(IDENT,'i',42,39,904)
State  : 0
Stack  : . LexToken(RBRACK,']',42,40,905)
ERROR: Error  : . LexToken(RBRACK,']',42,40,905)
State  : 0
Stack  : . LexToken(PERIOD,'.',42,41,906)
ERROR: Error  : . LexToken(PERIOD,'.',42,41,906)
State  : 0
Stack  : . LexToken(IDENT,'value',42,42,907)
ERROR: Error  : . LexToken(IDENT,'value',42,42,907)
State  : 0
Stack  : . LexToken(SEMICOLON,';',42,47,912)
ERROR: Error  : . LexToken(SEMICOLON,';',42,47,912)
State  : 0
Stack  : . LexToken(IF,'if',43,9,922)
ERROR: Error  : . LexToken(IF,'if',43,9,922)
State  : 0
Stack  : . LexToken(IDENT,'rand',43,12,925)
ERRState  : 0
Stack  : . LexToken(DEFINE,':=',40,11,804)
ERROR: Error  : . LexToken(DEFINE,':=',40,11,804)
State  : 0
Stack  : . LexToken(INT,'1',40,14,807)
ERROR: Error  : . LexToken(INT,'1',40,14,807)
State  : 0
Stack  : . LexToken(SEMICOLON,';',40,15,808)
ERROR: Error  : . LexToken(SEMICOLON,';',40,15,808)
State  : 0
Stack  : . LexToken(IDENT,'i',40,17,810)
ERROR: Error  : . LexToken(IDENT,'i',40,17,810)
State  : 0
Stack  : . LexToken(LEQ,'<=',40,18,811)
ERROR: Error  : . LexToken(LEQ,'<=',40,18,811)
State  : 0
Stack  : . LexToken(IDENT,'n',40,20,813)
ERROR: Error  : . LexToken(IDENT,'n',40,20,813)
State  : 0
Stack  : . LexToken(SEMICOLON,';',40,21,814)
ERROR: Error  : . LexToken(SEMICOLON,';',40,21,814)
State  : 0
Stack  : . LexToken(IDENT,'i',40,23,816)
ERROR: Error  : . LexToken(IDENT,'i',40,23,816)
State  : 0
Stack  : . LexToken(INC,'++',40,24,817)
ERROR: Error  : . LexToken(INC,'++',40,24,817)
State  : 0
Stack  : . LexToken(LBRACE,'{',40,26,819)
ERROR: Error  : . LexToken(LBRACE,'{',40,26,819)
State  : 0
Stack  : . LexToken(IDENT,'graph',41,9,829)
ERROR: Error  : . LexToken(IDENT,'graph',41,9,829)
State  : 0
Stack  : . LexToken(LBRACK,'[',41,14,834)
ERROR: Error  : . LexToken(LBRACK,'[',41,14,834)
State  : 0
Stack  : . LexToken(IDENT,'i',41,15,835)
ERROR: Error  : . LexToken(IDENT,'i',41,15,835)
State  : 0
Stack  : . LexToken(RBRACK,']',41,16,836)
ERROR: Error  : . LexToken(RBRACK,']',41,16,836)
State  : 0
Stack  : . LexToken(PERIOD,'.',41,17,837)
ERROR: Error  : . LexToken(PERIOD,'.',41,17,837)
State  : 0
Stack  : . LexToken(IDENT,'value',41,18,838)
ERROR: Error  : . LexToken(IDENT,'value',41,18,838)
State  : 0
Stack  : . LexToken(ASSIGN,'=',41,24,844)
ERROR: Error  : . LexToken(ASSIGN,'=',41,24,844)
State  : 0
Stack  : . LexToken(IDENT,'rand',41,26,846)
ERROR: Error  : . LexToken(IDENT,'rand',41,26,846)
State  : 0
Stack  : . LexToken(PERIOD,'.',41,30,850)
ERROR: Error  : . LexToken(PERIOD,'.',41,30,850)
State  : 0
Stack  : . LexToken(IDENT,'Intn',41,31,851)
ERROR: Error  : . LexToken(IDENT,'Intn',41,31,851)
State  : 0
Stack  : . LexToken(LPAREN,'(',41,35,855)
ERROR: Error  : . LexToken(LPAREN,'(',41,35,855)
State  : 0
Stack  : . LexToken(IDENT,'max_val',41,36,856)
ERROR: Error  : . LexToken(IDENT,'max_val',41,36,856)
State  : 0
Stack  : . LexToken(RPAREN,')',41,43,863)
ERROR: Error  : . LexToken(RPAREN,')',41,43,863)
State  : 0
Stack  : . LexToken(SEMICOLON,';',41,44,864)
ERROR: Error  : . LexToken(SEMICOLON,';',41,44,864)
State  : 0
Stack  : . LexToken(IDENT,'graph',42,9,874)
ERROR: Error  : . LexToken(IDENT,'graph',42,9,874)
State  : 0
Stack  : . LexToken(LBRACK,'[',42,14,879)
ERROR: Error  : . LexToken(LBRACK,'[',42,14,879)
State  : 0
Stack  : . LexToken(IDENT,'i',42,15,880)
ERROR: Error  : . LexToken(IDENT,'i',42,15,880)
State  : 0
Stack  : . LexToken(RBRACK,']',42,16,881)
ERROR: Error  : . LexToken(RBRACK,']',42,16,881)
State  : 0
Stack  : . LexToken(PERIOD,'.',42,17,882)
ERROR: Error  : . LexToken(PERIOD,'.',42,17,882)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',42,18,883)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',42,18,883)
State  : 0
Stack  : . LexToken(ASSIGN,'=',42,31,896)
ERROR: Error  : . LexToken(ASSIGN,'=',42,31,896)
State  : 0
Stack  : . LexToken(IDENT,'graph',42,33,898)
ERROR: Error  : . LexToken(IDENT,'graph',42,33,898)
State  : 0
Stack  : . LexToken(LBRACK,'[',42,38,903)
ERROR: Error  : . LexToken(LBRACK,'[',42,38,903)
State  : 0
Stack  : . LexToken(IDENT,'i',42,39,904)
ERROR: Error  : . LexToken(IDENT,'i',42,39,904)
State  : 0
Stack  : . LexToken(RBRACK,']',42,40,905)
ERROR: Error  : . LexToken(RBRACK,']',42,40,905)
State  : 0
Stack  : . LexToken(PERIOD,'.',42,41,906)
ERROR: Error  : . LexToken(PERIOD,'.',42,41,906)
State  : 0
Stack  : . LexToken(IDENT,'value',42,42,907)
ERROR: Error  : . LexToken(IDENT,'value',42,42,907)
State  : 0
Stack  : . LexToken(SEMICOLON,';',42,47,912)
ERROR: Error  : . LexToken(SEMICOLON,';',42,47,912)
State  : 0
Stack  : . LexToken(IF,'if',43,9,922)
ERROR: Error  : . LexToken(IF,'if',43,9,922)
State  : 0
Stack  : . LexToken(IDENT,'rand',43,12,925)
ERROR: Error  : . LexToken(IDENT,'rand',43,12,925)
State  : 0
Stack  : . LexToken(PERIOD,'.',43,16,929)
ERROR: Error  : . LexToken(PERIOD,'.',43,16,929)
State  : 0
Stack  : . LexToken(IDENT,'Intn',43,17,930)
ERROR: Error  : . LexToken(IDENT,'Intn',43,17,930)
State  : 0
Stack  : . LexToken(LPAREN,'(',43,21,934)
ERROR: Error  : . LexToken(LPAREN,'(',43,21,934)
State  : 0
Stack  : . LexToken(INT,'2',43,22,935)
ERROR: Error  : . LexToken(INT,'2',43,22,935)
State  : 0
Stack  : . LexToken(RPAREN,')',43,23,936)
ERROR: Error  : . LexToken(RPAREN,')',43,23,936)
State  : 0
Stack  : . LexToken(EQL,'==',43,25,938)
ERROR: Error  : . LexToken(EQL,'==',43,25,938)
State  : 0
Stack  : . LexToken(INT,'1',43,28,941)
ERROR: Error  : . LexToken(INT,'1',43,28,941)
State  : 0
Stack  : . LexToken(LBRACE,'{',43,30,943)
ERROR: Error  : . LexToken(LBRACE,'{',43,30,943)
State  : 0
Stack  : . LexToken(IDENT,'graph',44,13,957)
ERROR: Error  : . LexToken(IDENT,'graph',44,13,957)
State  : 0
Stack  : . LexToken(LBRACK,'[',44,18,962)
ERROR: Error  : . LexToken(LBRACK,'[',44,18,962)
State  : 0
Stack  : . LexToken(IDENT,'i',44,19,963)
ERROR: Error  : . LexToken(IDENT,'i',44,19,963)
State  : 0
Stack  : . LexToken(RBRACK,']',44,20,964)
ERROR: Error  : . LexToken(RBRACK,']',44,20,964)
State  : 0
Stack  : . LexToken(PERIOD,'.',44,21,965)
ERROR: Error  : . LexToken(PERIOD,'.',44,21,965)
State  : 0
Stack  : . LexToken(IDENT,'flag',44,22,966)
ERROR: Error  : . LexToken(IDENT,'flag',44,22,966)
State  : 0
Stack  : . LexToken(ASSIGN,'=',44,27,971)
ERROR: Error  : . LexToken(ASSIGN,'=',44,27,971)
State  : 0
Stack  : . LexToken(IDENT,'true',44,29,973)
ERROR: Error  : . LexToken(IDENT,'true',44,29,973)
State  : 0
Stack  : . LexToken(SEMICOLON,';',44,33,977)
ERROR: Error  : . LexToken(SEMICOLON,';',44,33,977)
State  : 0
Stack  : . LexToken(RBRACE,'}',45,9,987)
ERROR: Error  : . LexToken(RBRACE,'}',45,9,987)
State  : 0
Stack  : . LexToken(ELSE,'else',45,11,989)
ERROR: Error  : . LexToken(ELSE,'else',45,11,989)
State  : 0
Stack  : . LexToken(LBRACE,'{',45,16,994)
ERROR: Error  : . LexToken(LBRACE,'{',45,16,994)
State  : 0
Stack  : . LexToken(IDENT,'graph',46,13,1008)
ERROR: Error  : . LexToken(IDENT,'graph',46,13,1008)
State  : 0
Stack  : . LexToken(LBRACK,'[',46,18,1013)
ERROR: Error  : . LexToken(LBRACK,'[',46,18,1013)
State  : 0
Stack  : . LexToken(IDENT,'i',46,19,1014)
ERROR: Error  : . LexToken(IDENT,'i',46,19,1014)
State  : 0
Stack  : . LexToken(RBRACK,']',46,20,1015)
ERROR: Error  : . LexToken(RBRACK,']',46,20,1015)
State  : 0
Stack  : . LexToken(PERIOD,'.',46,21,1016)
ERROR: Error  : . LexToken(PERIOD,'.',46,21,1016)
State  : 0
Stack  : . LexToken(IDENT,'flag',46,22,1017)
ERROR: Error  : . LexToken(IDENT,'flag',46,22,1017)
State  : 0
Stack  : . LexToken(ASSIGN,'=',46,27,1022)
ERROR: Error  : . LexToken(ASSIGN,'=',46,27,1022)
State  : 0
Stack  : . LexToken(IDENT,'false',46,29,1024)
ERROR: Error  : . LexToken(IDENT,'false',46,29,1024)
State  : 0
Stack  : . LexToken(SEMICOLON,';',46,34,1029)
ERROR: Error  : . LexToken(SEMICOLON,';',46,34,1029)
State  : 0
Stack  : . LexToken(RBRACE,'}',47,9,1039)
ERROR: Error  : . LexToken(RBRACE,'}',47,9,1039)
State  : 0
Stack  : . LexToken(SEMICOLON,';',47,10,1040)
ERROR: Error  : . LexToken(SEMICOLON,';',47,10,1040)
State  : 0
Stack  : . LexToken(IF,'if',48,9,1050)
ERROR: Error  : . LexToken(IF,'if',48,9,1050)
State  : 0
Stack  : . LexToken(IDENT,'i',48,12,1053)
ERROR: Error  : . LexToken(IDENT,'i',48,12,1053)
State  : 0
Stack  : . LexToken(MUL,'*',48,13,1054)
ERROR: Error  : . LexToken(MUL,'*',48,13,1054)
State  : 0
Stack  : . LexToken(INT,'2',48,14,1055)
ERROR: Error  : . LexToken(INT,'2',48,14,1055)
State  : 0
Stack  : . LexToken(LEQ,'<=',48,16,1057)
ERROR: Error  : . LexToken(LEQ,'<=',48,16,1057)
State  : 0
Stack  : . LexToken(IDENT,'n',48,19,1060)
ERROR: Error  : . LexToken(IDENT,'n',48,19,1060)
State  : 0
Stack  : . LexToken(LBRACE,'{',48,21,1062)
ERROR: Error  : . LexToken(LBRACE,'{',48,21,1062)
State  : 0
Stack  : . LexToken(IDENT,'graph',49,13,1076)
ERROR: Error  : . LexToken(IDENT,'graph',49,13,1076)
State  : 0
Stack  : OR: Error  : . LexToken(IDENT,'rand',43,12,925)
State  : 0
Stack  : . LexToken(PERIOD,'.',43,16,929)
ERROR: Error  : . LexToken(PERIOD,'.',43,16,929)
State  : 0
Stack  : . LexToken(IDENT,'Intn',43,17,930)
ERROR: Error  : . LexToken(IDENT,'Intn',43,17,930)
State  : 0
Stack  : . LexToken(LPAREN,'(',43,21,934)
ERROR: Error  : . LexToken(LPAREN,'(',43,21,934)
State  : 0
Stack  : . LexToken(INT,'2',43,22,935)
ERROR: Error  : . LexToken(INT,'2',43,22,935)
State  : 0
Stack  : . LexToken(RPAREN,')',43,23,936)
ERROR: Error  : . LexToken(RPAREN,')',43,23,936)
State  : 0
Stack  : . LexToken(EQL,'==',43,25,938)
ERROR: Error  : . LexToken(EQL,'==',43,25,938)
State  : 0
Stack  : . LexToken(INT,'1',43,28,941)
ERROR: Error  : . LexToken(INT,'1',43,28,941)
State  : 0
Stack  : . LexToken(LBRACE,'{',43,30,943)
ERROR: Error  : . LexToken(LBRACE,'{',43,30,943)
State  : 0
Stack  : . LexToken(IDENT,'graph',44,13,957)
ERROR: Error  : . LexToken(IDENT,'graph',44,13,957)
State  : 0
Stack  : . LexToken(LBRACK,'[',44,18,962)
ERROR: Error  : . LexToken(LBRACK,'[',44,18,962)
State  : 0
Stack  : . LexToken(IDENT,'i',44,19,963)
ERROR: Error  : . LexToken(IDENT,'i',44,19,963)
State  : 0
Stack  : . LexToken(RBRACK,']',44,20,964)
ERROR: Error  : . LexToken(RBRACK,']',44,20,964)
State  : 0
Stack  : . LexToken(PERIOD,'.',44,21,965)
ERROR: Error  : . LexToken(PERIOD,'.',44,21,965)
State  : 0
Stack  : . LexToken(IDENT,'flag',44,22,966)
ERROR: Error  : . LexToken(IDENT,'flag',44,22,966)
State  : 0
Stack  : . LexToken(ASSIGN,'=',44,27,971)
ERROR: Error  : . LexToken(ASSIGN,'=',44,27,971)
State  : 0
Stack  : . LexToken(IDENT,'true',44,29,973)
ERROR: Error  : . LexToken(IDENT,'true',44,29,973)
State  : 0
Stack  : . LexToken(SEMICOLON,';',44,33,977)
ERROR: Error  : . LexToken(SEMICOLON,';',44,33,977)
State  : 0
Stack  : . LexToken(RBRACE,'}',45,9,987)
ERROR: Error  : . LexToken(RBRACE,'}',45,9,987)
State  : 0
Stack  : . LexToken(ELSE,'else',45,11,989)
ERROR: Error  : . LexToken(ELSE,'else',45,11,989)
State  : 0
Stack  : . LexToken(LBRACE,'{',45,16,994)
ERROR: Error  : . LexToken(LBRACE,'{',45,16,994)
State  : 0
Stack  : . LexToken(IDENT,'graph',46,13,1008)
ERROR: Error  : . LexToken(IDENT,'graph',46,13,1008)
State  : 0
Stack  : . LexToken(LBRACK,'[',46,18,1013)
ERROR: Error  : . LexToken(LBRACK,'[',46,18,1013)
State  : 0
Stack  : . LexToken(IDENT,'i',46,19,1014)
ERROR: Error  : . LexToken(IDENT,'i',46,19,1014)
State  : 0
Stack  : . LexToken(RBRACK,']',46,20,1015)
ERROR: Error  : . LexToken(RBRACK,']',46,20,1015)
State  : 0
Stack  : . LexToken(PERIOD,'.',46,21,1016)
ERROR: Error  : . LexToken(PERIOD,'.',46,21,1016)
State  : 0
Stack  : . LexToken(IDENT,'flag',46,22,1017)
ERROR: Error  : . LexToken(IDENT,'flag',46,22,1017)
State  : 0
Stack  : . LexToken(ASSIGN,'=',46,27,1022)
ERROR: Error  : . LexToken(ASSIGN,'=',46,27,1022)
State  : 0
Stack  : . LexToken(IDENT,'false',46,29,1024)
ERROR: Error  : . LexToken(IDENT,'false',46,29,1024)
State  : 0
Stack  : . LexToken(SEMICOLON,';',46,34,1029)
ERROR: Error  : . LexToken(SEMICOLON,';',46,34,1029)
State  : 0
Stack  : . LexToken(RBRACE,'}',47,9,1039)
ERROR: Error  : . LexToken(RBRACE,'}',47,9,1039)
State  : 0
Stack  : . LexToken(SEMICOLON,';',47,10,1040)
ERROR: Error  : . LexToken(SEMICOLON,';',47,10,1040)
State  : 0
Stack  : . LexToken(IF,'if',48,9,1050)
ERROR: Error  : . LexToken(IF,'if',48,9,1050)
State  : 0
Stack  : . LexToken(IDENT,'i',48,12,1053)
ERROR: Error  : . LexToken(IDENT,'i',48,12,1053)
State  : 0
Stack  : . LexToken(MUL,'*',48,13,1054)
ERROR: Error  : . LexToken(MUL,'*',48,13,1054)
State  : 0
Stack  : . LexToken(INT,'2',48,14,1055)
ERROR: Error  : . LexToken(INT,'2',48,14,1055)
State  : 0
Stack  : . LexToken(LEQ,'<=',48,16,1057)
ERROR: Error  : . LexToken(LEQ,'<=',48,16,1057)
State  : 0
Stack  : . LexToken(IDENT,'n',48,19,1060)
ERROR: Error  : . LexToken(IDENT,'n',48,19,1060)
State  : 0
Stack  : . LexToken(LBRACE,'{',48,21,1062)
ERROR: Error  : . LexToken(LBRACE,'{',48,21,1062)
State  : 0
Stack  : . LexToken(IDENT,'graph',49,13,1076)
ERROR: Error  : . LexToken(IDENT,'graph',49,13,1076)
State  : 0
Stack  : . LexToken(LBRACK,'[',49,18,1081)
. LexToken(LBRACK,'[',49,18,1081)
ERROR: Error  : . LexToken(LBRACK,'[',49,18,1081)
State  : 0
Stack  : . LexToken(IDENT,'i',49,19,1082)
ERROR: Error  : . LexToken(IDENT,'i',49,19,1082)
State  : 0
Stack  : . LexToken(RBRACK,']',49,20,1083)
ERROR: Error  : . LexToken(RBRACK,']',49,20,1083)
State  : 0
Stack  : . LexToken(PERIOD,'.',49,21,1084)
ERROR: Error  : . LexToken(PERIOD,'.',49,21,1084)
State  : 0
Stack  : . LexToken(IDENT,'left',49,22,1085)
ERROR: Error  : . LexToken(IDENT,'left',49,22,1085)
State  : 0
Stack  : . LexToken(ASSIGN,'=',49,27,1090)
ERROR: Error  : . LexToken(ASSIGN,'=',49,27,1090)
State  : 0
Stack  : . LexToken(AND,'&',49,29,1092)
ERROR: Error  : . LexToken(AND,'&',49,29,1092)
State  : 0
Stack  : . LexToken(IDENT,'graph',49,30,1093)
ERROR: Error  : . LexToken(IDENT,'graph',49,30,1093)
State  : 0
Stack  : . LexToken(LBRACK,'[',49,35,1098)
ERROR: Error  : . LexToken(LBRACK,'[',49,35,1098)
State  : 0
Stack  : . LexToken(IDENT,'i',49,36,1099)
ERROR: Error  : . LexToken(IDENT,'i',49,36,1099)
State  : 0
Stack  : . LexToken(MUL,'*',49,37,1100)
ERROR: Error  : . LexToken(MUL,'*',49,37,1100)
State  : 0
Stack  : . LexToken(INT,'2',49,38,1101)
ERROR: Error  : . LexToken(INT,'2',49,38,1101)
State  : 0
Stack  : . LexToken(RBRACK,']',49,39,1102)
ERROR: Error  : . LexToken(RBRACK,']',49,39,1102)
State  : 0
Stack  : . LexToken(SEMICOLON,';',49,40,1103)
ERROR: Error  : . LexToken(SEMICOLON,';',49,40,1103)
State  : 0
Stack  : . LexToken(RBRACE,'}',50,9,1113)
ERROR: Error  : . LexToken(RBRACE,'}',50,9,1113)
State  : 0
Stack  : . LexToken(ELSE,'else',50,11,1115)
ERROR: Error  : . LexToken(ELSE,'else',50,11,1115)
State  : 0
Stack  : . LexToken(LBRACE,'{',50,16,1120)
ERROR: Error  : . LexToken(LBRACE,'{',50,16,1120)
State  : 0
Stack  : . LexToken(IDENT,'graph',51,13,1134)
ERROR: Error  : . LexToken(IDENT,'graph',51,13,1134)
State  : 0
Stack  : . LexToken(LBRACK,'[',51,18,1139)
ERROR: Error  : . LexToken(LBRACK,'[',51,18,1139)
State  : 0
Stack  : . LexToken(IDENT,'i',51,19,1140)
ERROR: Error  : . LexToken(IDENT,'i',51,19,1140)
State  : 0
Stack  : . LexToken(RBRACK,']',51,20,1141)
ERROR: Error  : . LexToken(RBRACK,']',51,20,1141)
State  : 0
Stack  : . LexToken(PERIOD,'.',51,21,1142)
ERROR: Error  : . LexToken(PERIOD,'.',51,21,1142)
State  : 0
Stack  : . LexToken(IDENT,'left',51,22,1143)
ERROR: Error  : . LexToken(IDENT,'left',51,22,1143)
State  : 0
Stack  : . LexToken(ASSIGN,'=',51,27,1148)
ERROR: Error  : . LexToken(ASSIGN,'=',51,27,1148)
State  : 0
Stack  : . LexToken(IDENT,'nil',51,29,1150)
ERROR: Error  : . LexToken(IDENT,'nil',51,29,1150)
State  : 0
Stack  : . LexToken(SEMICOLON,';',51,32,1153)
ERROR: Error  : . LexToken(SEMICOLON,';',51,32,1153)
State  : 0
Stack  : . LexToken(RBRACE,'}',52,9,1163)
ERROR: Error  : . LexToken(RBRACE,'}',52,9,1163)
State  : 0
Stack  : . LexToken(SEMICOLON,';',52,10,1164)
ERROR: Error  : . LexToken(SEMICOLON,';',52,10,1164)
State  : 0
Stack  : . LexToken(IF,'if',53,9,1174)
ERROR: Error  : . LexToken(IF,'if',53,9,1174)
State  : 0
Stack  : . LexToken(IDENT,'i',53,12,1177)
ERROR: Error  : . LexToken(IDENT,'i',53,12,1177)
State  : 0
Stack  : . LexToken(MUL,'*',53,13,1178)
ERROR: Error  : . LexToken(MUL,'*',53,13,1178)
State  : 0
Stack  : . LexToken(INT,'2',53,14,1179)
ERROR: Error  : . LexToken(INT,'2',53,14,1179)
State  : 0
Stack  : . LexToken(ADD,'+',53,16,1181)
ERROR: Error  : . LexToken(ADD,'+',53,16,1181)
State  : 0
Stack  : . LexToken(INT,'1',53,17,1182)
ERROR: Error  : . LexToken(INT,'1',53,17,1182)
State  : 0
Stack  : . LexToken(LEQ,'<=',53,19,1184)
ERROR: Error  : . LexToken(LEQ,'<=',53,19,1184)
State  : 0
Stack  : . LexToken(IDENT,'n',53,22,1187)
ERROR: Error  : . LexToken(IDENT,'n',53,22,1187)
State  : 0
Stack  : . LexToken(LBRACE,'{',53,24,1189)
ERROR: Error  : . LexToken(LBRACE,'{',53,24,1189)
State  : 0
Stack  : . LexToken(IDENT,'graph',54,13,1203)
ERROR: Error  : . LexToken(IDENT,'graph',54,13,1203)
State  : 0
Stack  : . LexToken(LBRACK,'[',54,18,1208)
ERROR: Error  : . LexToken(LBRACK,'[',54,18,1208)
State  : 0
Stack  : . LexToken(IDENT,'i',54,19,1209)
ERROR: Error  : . LexToken(IDENT,'i',54,19,1209)
State  :ERROR: Error  : . LexToken(LBRACK,'[',49,18,1081)
State  : 0
Stack  : . LexToken(IDENT,'i',49,19,1082)
ERROR: Error  : . LexToken(IDENT,'i',49,19,1082)
State  : 0
Stack  : . LexToken(RBRACK,']',49,20,1083)
ERROR: Error  : . LexToken(RBRACK,']',49,20,1083)
State  : 0
Stack  : . LexToken(PERIOD,'.',49,21,1084)
ERROR: Error  : . LexToken(PERIOD,'.',49,21,1084)
State  : 0
Stack  : . LexToken(IDENT,'left',49,22,1085)
ERROR: Error  : . LexToken(IDENT,'left',49,22,1085)
State  : 0
Stack  : . LexToken(ASSIGN,'=',49,27,1090)
ERROR: Error  : . LexToken(ASSIGN,'=',49,27,1090)
State  : 0
Stack  : . LexToken(AND,'&',49,29,1092)
ERROR: Error  : . LexToken(AND,'&',49,29,1092)
State  : 0
Stack  : . LexToken(IDENT,'graph',49,30,1093)
ERROR: Error  : . LexToken(IDENT,'graph',49,30,1093)
State  : 0
Stack  : . LexToken(LBRACK,'[',49,35,1098)
ERROR: Error  : . LexToken(LBRACK,'[',49,35,1098)
State  : 0
Stack  : . LexToken(IDENT,'i',49,36,1099)
ERROR: Error  : . LexToken(IDENT,'i',49,36,1099)
State  : 0
Stack  : . LexToken(MUL,'*',49,37,1100)
ERROR: Error  : . LexToken(MUL,'*',49,37,1100)
State  : 0
Stack  : . LexToken(INT,'2',49,38,1101)
ERROR: Error  : . LexToken(INT,'2',49,38,1101)
State  : 0
Stack  : . LexToken(RBRACK,']',49,39,1102)
ERROR: Error  : . LexToken(RBRACK,']',49,39,1102)
State  : 0
Stack  : . LexToken(SEMICOLON,';',49,40,1103)
ERROR: Error  : . LexToken(SEMICOLON,';',49,40,1103)
State  : 0
Stack  : . LexToken(RBRACE,'}',50,9,1113)
ERROR: Error  : . LexToken(RBRACE,'}',50,9,1113)
State  : 0
Stack  : . LexToken(ELSE,'else',50,11,1115)
ERROR: Error  : . LexToken(ELSE,'else',50,11,1115)
State  : 0
Stack  : . LexToken(LBRACE,'{',50,16,1120)
ERROR: Error  : . LexToken(LBRACE,'{',50,16,1120)
State  : 0
Stack  : . LexToken(IDENT,'graph',51,13,1134)
ERROR: Error  : . LexToken(IDENT,'graph',51,13,1134)
State  : 0
Stack  : . LexToken(LBRACK,'[',51,18,1139)
ERROR: Error  : . LexToken(LBRACK,'[',51,18,1139)
State  : 0
Stack  : . LexToken(IDENT,'i',51,19,1140)
ERROR: Error  : . LexToken(IDENT,'i',51,19,1140)
State  : 0
Stack  : . LexToken(RBRACK,']',51,20,1141)
ERROR: Error  : . LexToken(RBRACK,']',51,20,1141)
State  : 0
Stack  : . LexToken(PERIOD,'.',51,21,1142)
ERROR: Error  : . LexToken(PERIOD,'.',51,21,1142)
State  : 0
Stack  : . LexToken(IDENT,'left',51,22,1143)
ERROR: Error  : . LexToken(IDENT,'left',51,22,1143)
State  : 0
Stack  : . LexToken(ASSIGN,'=',51,27,1148)
ERROR: Error  : . LexToken(ASSIGN,'=',51,27,1148)
State  : 0
Stack  : . LexToken(IDENT,'nil',51,29,1150)
ERROR: Error  : . LexToken(IDENT,'nil',51,29,1150)
State  : 0
Stack  : . LexToken(SEMICOLON,';',51,32,1153)
ERROR: Error  : . LexToken(SEMICOLON,';',51,32,1153)
State  : 0
Stack  : . LexToken(RBRACE,'}',52,9,1163)
ERROR: Error  : . LexToken(RBRACE,'}',52,9,1163)
State  : 0
Stack  : . LexToken(SEMICOLON,';',52,10,1164)
ERROR: Error  : . LexToken(SEMICOLON,';',52,10,1164)
State  : 0
Stack  : . LexToken(IF,'if',53,9,1174)
ERROR: Error  : . LexToken(IF,'if',53,9,1174)
State  : 0
Stack  : . LexToken(IDENT,'i',53,12,1177)
ERROR: Error  : . LexToken(IDENT,'i',53,12,1177)
State  : 0
Stack  : . LexToken(MUL,'*',53,13,1178)
ERROR: Error  : . LexToken(MUL,'*',53,13,1178)
State  : 0
Stack  : . LexToken(INT,'2',53,14,1179)
ERROR: Error  : . LexToken(INT,'2',53,14,1179)
State  : 0
Stack  : . LexToken(ADD,'+',53,16,1181)
ERROR: Error  : . LexToken(ADD,'+',53,16,1181)
State  : 0
Stack  : . LexToken(INT,'1',53,17,1182)
ERROR: Error  : . LexToken(INT,'1',53,17,1182)
State  : 0
Stack  : . LexToken(LEQ,'<=',53,19,1184)
ERROR: Error  : . LexToken(LEQ,'<=',53,19,1184)
State  : 0
Stack  : . LexToken(IDENT,'n',53,22,1187)
ERROR: Error  : . LexToken(IDENT,'n',53,22,1187)
State  : 0
Stack  : . LexToken(LBRACE,'{',53,24,1189)
ERROR: Error  : . LexToken(LBRACE,'{',53,24,1189)
State  : 0
Stack  : . LexToken(IDENT,'graph',54,13,1203)
ERROR: Error  : . LexToken(IDENT,'graph',54,13,1203)
State  : 0
Stack  : . LexToken(LBRACK,'[',54,18,1208)
ERROR: Error  : . LexToken(LBRACK,'[',54,18,1208)
State  : 0
Stack  : . LexToken(IDENT,'i',54,19,1209)
ERROR: Error  : . LexToken(IDENT,'i',54,19,1209)
State  : 0
Stack  : . LexToken(RBRACK,']',54,20,1210)
ERROR: Error  : . LexToken(RBRACK,']',54,20,1210)
State  : 0
Stack  : . LexToken(PERIOD,'.',54,21,1211)
ERROR: Error  : . LexToken(PERIOD,'.',54,21,1211)
State  : 0
Stack  : . LexToken(IDENT,'right',54,22,1212)
ERROR: Error  : . LexToken(IDENT,'right',54,22,1212)
State  : 0
Stack  : . LexToken(ASSIGN,'=',54,28,1218)
ERROR: Error  : . LexToken(ASSIGN,'=',54,28,1218)
State  : 0
Stack  : . LexToken(AND,'&',54,30,1220)
ERROR: Error  : . LexToken(AND,'&',54,30,1220)
State  : 0
Stack  : . LexToken(IDENT,'graph',54,31,1221)
ERROR: Error  : . LexToken(IDENT,'graph',54,31,1221)
State  : 0
Stack  : . LexToken(LBRACK,'[',54,36,1226)
ERROR: Error  : . LexToken(LBRACK,'[',54,36,1226)
State  : 0
Stack  : . LexToken(IDENT,'i',54,37,1227)
ERROR: Error  : . LexToken(IDENT,'i',54,37,1227)
State  : 0
Stack  : . LexToken(MUL,'*',54,38,1228)
ERROR: Error  : . LexToken(MUL,'*',54,38,1228)
State  : 0
Stack  : . LexToken(INT,'2',54,39,1229)
ERROR: Error  : . LexToken(INT,'2',54,39,1229)
State  : 0
Stack  : . LexToken(ADD,'+',54,41,1231)
ERROR: Error  : . LexToken(ADD,'+',54,41,1231)
State  : 0
Stack  : . LexToken(INT,'1',54,43,1233)
ERROR: Error  : . LexToken(INT,'1',54,43,1233)
State  : 0
Stack  : . LexToken(RBRACK,']',54,44,1234)
ERROR: Error  : . LexToken(RBRACK,']',54,44,1234)
State  : 0
Stack  : . LexToken(SEMICOLON,';',54,45,1235)
ERROR: Error  : . LexToken(SEMICOLON,';',54,45,1235)
State  : 0
Stack  : . LexToken(RBRACE,'}',55,9,1245)
ERROR: Error  : . LexToken(RBRACE,'}',55,9,1245)
State  : 0
Stack  : . LexToken(ELSE,'else',55,11,1247)
ERROR: Error  : . LexToken(ELSE,'else',55,11,1247)
State  : 0
Stack  : . LexToken(LBRACE,'{',55,16,1252)
ERROR: Error  : . LexToken(LBRACE,'{',55,16,1252)
State  : 0
Stack  : . LexToken(IDENT,'graph',56,13,1266)
ERROR: Error  : . LexToken(IDENT,'graph',56,13,1266)
State  : 0
Stack  : . LexToken(LBRACK,'[',56,18,1271)
ERROR: Error  : . LexToken(LBRACK,'[',56,18,1271)
State  : 0
Stack  : . LexToken(IDENT,'i',56,19,1272)
ERROR: Error  : . LexToken(IDENT,'i',56,19,1272)
State  : 0
Stack  : . LexToken(RBRACK,']',56,20,1273)
ERROR: Error  : . LexToken(RBRACK,']',56,20,1273)
State  : 0
Stack  : . LexToken(PERIOD,'.',56,21,1274)
ERROR: Error  : . LexToken(PERIOD,'.',56,21,1274)
State  : 0
Stack  : . LexToken(IDENT,'right',56,22,1275)
ERROR: Error  : . LexToken(IDENT,'right',56,22,1275)
State  : 0
Stack  : . LexToken(ASSIGN,'=',56,28,1281)
ERROR: Error  : . LexToken(ASSIGN,'=',56,28,1281)
State  : 0
Stack  : . LexToken(IDENT,'nil',56,30,1283)
ERROR: Error  : . LexToken(IDENT,'nil',56,30,1283)
State  : 0
Stack  : . LexToken(SEMICOLON,';',56,33,1286)
ERROR: Error  : . LexToken(SEMICOLON,';',56,33,1286)
State  : 0
Stack  : . LexToken(RBRACE,'}',57,9,1296)
ERROR: Error  : . LexToken(RBRACE,'}',57,9,1296)
State  : 0
Stack  : . LexToken(SEMICOLON,';',57,10,1297)
ERROR: Error  : . LexToken(SEMICOLON,';',57,10,1297)
State  : 0
Stack  : . LexToken(IDENT,'graph',58,9,1307)
ERROR: Error  : . LexToken(IDENT,'graph',58,9,1307)
State  : 0
Stack  : . LexToken(LBRACK,'[',58,14,1312)
ERROR: Error  : . LexToken(LBRACK,'[',58,14,1312)
State  : 0
Stack  : . LexToken(IDENT,'i',58,15,1313)
ERROR: Error  : . LexToken(IDENT,'i',58,15,1313)
State  : 0
Stack  : . LexToken(RBRACK,']',58,16,1314)
ERROR: Error  : . LexToken(RBRACK,']',58,16,1314)
State  : 0
Stack  : . LexToken(PERIOD,'.',58,17,1315)
ERROR: Error  : . LexToken(PERIOD,'.',58,17,1315)
State  : 0
Stack  : . LexToken(IDENT,'parent',58,18,1316)
ERROR: Error  : . LexToken(IDENT,'parent',58,18,1316)
State  : 0
Stack  : . LexToken(ASSIGN,'=',58,25,1323)
ERROR: Error  : . LexToken(ASSIGN,'=',58,25,1323)
State  : 0
Stack  : . LexToken(AND,'&',58,27,1325)
ERROR: Error  : . LexToken(AND,'&',58,27,1325)
State  : 0
Stack  : . LexToken(IDENT,'graph',58,28,1326)
ERROR: Error  : . LexToken(IDENT,'graph',58,28,1326)
State  : 0
Stack  : . LexToken(LBRACK,'[',58,33,1331)
ERROR: Error  : . LexToken(LBRACK,'[',58,33,1331)
State  : 0
Stack  : . LexToken(IDENT,'i',58,34,1332)
ERROR: Error  : . LexToken(IDENT,'i',58,34,1332)
State  : 0
Stack  : . LexTok 0
Stack  : . LexToken(RBRACK,']',54,20,1210)
ERROR: Error  : . LexToken(RBRACK,']',54,20,1210)
State  : 0
Stack  : . LexToken(PERIOD,'.',54,21,1211)
ERROR: Error  : . LexToken(PERIOD,'.',54,21,1211)
State  : 0
Stack  : . LexToken(IDENT,'right',54,22,1212)
ERROR: Error  : . LexToken(IDENT,'right',54,22,1212)
State  : 0
Stack  : . LexToken(ASSIGN,'=',54,28,1218)
ERROR: Error  : . LexToken(ASSIGN,'=',54,28,1218)
State  : 0
Stack  : . LexToken(AND,'&',54,30,1220)
ERROR: Error  : . LexToken(AND,'&',54,30,1220)
State  : 0
Stack  : . LexToken(IDENT,'graph',54,31,1221)
ERROR: Error  : . LexToken(IDENT,'graph',54,31,1221)
State  : 0
Stack  : . LexToken(LBRACK,'[',54,36,1226)
ERROR: Error  : . LexToken(LBRACK,'[',54,36,1226)
State  : 0
Stack  : . LexToken(IDENT,'i',54,37,1227)
ERROR: Error  : . LexToken(IDENT,'i',54,37,1227)
State  : 0
Stack  : . LexToken(MUL,'*',54,38,1228)
ERROR: Error  : . LexToken(MUL,'*',54,38,1228)
State  : 0
Stack  : . LexToken(INT,'2',54,39,1229)
ERROR: Error  : . LexToken(INT,'2',54,39,1229)
State  : 0
Stack  : . LexToken(ADD,'+',54,41,1231)
ERROR: Error  : . LexToken(ADD,'+',54,41,1231)
State  : 0
Stack  : . LexToken(INT,'1',54,43,1233)
ERROR: Error  : . LexToken(INT,'1',54,43,1233)
State  : 0
Stack  : . LexToken(RBRACK,']',54,44,1234)
ERROR: Error  : . LexToken(RBRACK,']',54,44,1234)
State  : 0
Stack  : . LexToken(SEMICOLON,';',54,45,1235)
ERROR: Error  : . LexToken(SEMICOLON,';',54,45,1235)
State  : 0
Stack  : . LexToken(RBRACE,'}',55,9,1245)
ERROR: Error  : . LexToken(RBRACE,'}',55,9,1245)
State  : 0
Stack  : . LexToken(ELSE,'else',55,11,1247)
ERROR: Error  : . LexToken(ELSE,'else',55,11,1247)
State  : 0
Stack  : . LexToken(LBRACE,'{',55,16,1252)
ERROR: Error  : . LexToken(LBRACE,'{',55,16,1252)
State  : 0
Stack  : . LexToken(IDENT,'graph',56,13,1266)
ERROR: Error  : . LexToken(IDENT,'graph',56,13,1266)
State  : 0
Stack  : . LexToken(LBRACK,'[',56,18,1271)
ERROR: Error  : . LexToken(LBRACK,'[',56,18,1271)
State  : 0
Stack  : . LexToken(IDENT,'i',56,19,1272)
ERROR: Error  : . LexToken(IDENT,'i',56,19,1272)
State  : 0
Stack  : . LexToken(RBRACK,']',56,20,1273)
ERROR: Error  : . LexToken(RBRACK,']',56,20,1273)
State  : 0
Stack  : . LexToken(PERIOD,'.',56,21,1274)
ERROR: Error  : . LexToken(PERIOD,'.',56,21,1274)
State  : 0
Stack  : . LexToken(IDENT,'right',56,22,1275)
ERROR: Error  : . LexToken(IDENT,'right',56,22,1275)
State  : 0
Stack  : . LexToken(ASSIGN,'=',56,28,1281)
ERROR: Error  : . LexToken(ASSIGN,'=',56,28,1281)
State  : 0
Stack  : . LexToken(IDENT,'nil',56,30,1283)
ERROR: Error  : . LexToken(IDENT,'nil',56,30,1283)
State  : 0
Stack  : . LexToken(SEMICOLON,';',56,33,1286)
ERROR: Error  : . LexToken(SEMICOLON,';',56,33,1286)
State  : 0
Stack  : . LexToken(RBRACE,'}',57,9,1296)
ERROR: Error  : . LexToken(RBRACE,'}',57,9,1296)
State  : 0
Stack  : . LexToken(SEMICOLON,';',57,10,1297)
ERROR: Error  : . LexToken(SEMICOLON,';',57,10,1297)
State  : 0
Stack  : . LexToken(IDENT,'graph',58,9,1307)
ERROR: Error  : . LexToken(IDENT,'graph',58,9,1307)
State  : 0
Stack  : . LexToken(LBRACK,'[',58,14,1312)
ERROR: Error  : . LexToken(LBRACK,'[',58,14,1312)
State  : 0
Stack  : . LexToken(IDENT,'i',58,15,1313)
ERROR: Error  : . LexToken(IDENT,'i',58,15,1313)
State  : 0
Stack  : . LexToken(RBRACK,']',58,16,1314)
ERROR: Error  : . LexToken(RBRACK,']',58,16,1314)
State  : 0
Stack  : . LexToken(PERIOD,'.',58,17,1315)
ERROR: Error  : . LexToken(PERIOD,'.',58,17,1315)
State  : 0
Stack  : . LexToken(IDENT,'parent',58,18,1316)
ERROR: Error  : . LexToken(IDENT,'parent',58,18,1316)
State  : 0
Stack  : . LexToken(ASSIGN,'=',58,25,1323)
ERROR: Error  : . LexToken(ASSIGN,'=',58,25,1323)
State  : 0
Stack  : . LexToken(AND,'&',58,27,1325)
ERROR: Error  : . LexToken(AND,'&',58,27,1325)
State  : 0
Stack  : . LexToken(IDENT,'graph',58,28,1326)
ERROR: Error  : . LexToken(IDENT,'graph',58,28,1326)
State  : 0
Stack  : . LexToken(LBRACK,'[',58,33,1331)
ERROR: Error  : . LexToken(LBRACK,'[',58,33,1331)
State  : 0
Stack  : . LexToken(IDENT,'i',58,34,1332)
ERROR: Error  : . LexToken(IDENT,'i',58,34,1332)
State  : 0
Stack  : . LexToken(QUO,'/',58,35,1333)
en(QUO,'/',58,35,1333)
ERROR: Error  : . LexToken(QUO,'/',58,35,1333)
State  : 0
Stack  : . LexToken(INT,'2',58,36,1334)
ERROR: Error  : . LexToken(INT,'2',58,36,1334)
State  : 0
Stack  : . LexToken(RBRACK,']',58,37,1335)
ERROR: Error  : . LexToken(RBRACK,']',58,37,1335)
State  : 0
Stack  : . LexToken(SEMICOLON,';',58,38,1336)
ERROR: Error  : . LexToken(SEMICOLON,';',58,38,1336)
State  : 0
Stack  : . LexToken(RBRACE,'}',59,5,1342)
ERROR: Error  : . LexToken(RBRACE,'}',59,5,1342)
State  : 0
Stack  : . LexToken(SEMICOLON,';',59,6,1343)
ERROR: Error  : . LexToken(SEMICOLON,';',59,6,1343)
State  : 0
Stack  : . LexToken(IDENT,'graph',60,5,1349)
ERROR: Error  : . LexToken(IDENT,'graph',60,5,1349)
State  : 0
Stack  : . LexToken(LBRACK,'[',60,10,1354)
ERROR: Error  : . LexToken(LBRACK,'[',60,10,1354)
State  : 0
Stack  : . LexToken(INT,'1',60,11,1355)
ERROR: Error  : . LexToken(INT,'1',60,11,1355)
State  : 0
Stack  : . LexToken(RBRACK,']',60,12,1356)
ERROR: Error  : . LexToken(RBRACK,']',60,12,1356)
State  : 0
Stack  : . LexToken(PERIOD,'.',60,13,1357)
ERROR: Error  : . LexToken(PERIOD,'.',60,13,1357)
State  : 0
Stack  : . LexToken(IDENT,'parent',60,14,1358)
ERROR: Error  : . LexToken(IDENT,'parent',60,14,1358)
State  : 0
Stack  : . LexToken(ASSIGN,'=',60,21,1365)
ERROR: Error  : . LexToken(ASSIGN,'=',60,21,1365)
State  : 0
Stack  : . LexToken(IDENT,'nil',60,23,1367)
ERROR: Error  : . LexToken(IDENT,'nil',60,23,1367)
State  : 0
Stack  : . LexToken(SEMICOLON,';',60,26,1370)
ERROR: Error  : . LexToken(SEMICOLON,';',60,26,1370)
State  : 0
Stack  : . LexToken(IDENT,'visit',62,5,1415)
ERROR: Error  : . LexToken(IDENT,'visit',62,5,1415)
State  : 0
Stack  : . LexToken(LPAREN,'(',62,10,1420)
ERROR: Error  : . LexToken(LPAREN,'(',62,10,1420)
State  : 0
Stack  : . LexToken(AND,'&',62,11,1421)
ERROR: Error  : . LexToken(AND,'&',62,11,1421)
State  : 0
Stack  : . LexToken(IDENT,'graph',62,12,1422)
ERROR: Error  : . LexToken(IDENT,'graph',62,12,1422)
State  : 0
Stack  : . LexToken(LBRACK,'[',62,17,1427)
ERROR: Error  : . LexToken(LBRACK,'[',62,17,1427)
State  : 0
Stack  : . LexToken(INT,'1',62,18,1428)
ERROR: Error  : . LexToken(INT,'1',62,18,1428)
State  : 0
Stack  : . LexToken(RBRACK,']',62,19,1429)
ERROR: Error  : . LexToken(RBRACK,']',62,19,1429)
State  : 0
Stack  : . LexToken(RPAREN,')',62,20,1430)
ERROR: Error  : . LexToken(RPAREN,')',62,20,1430)
State  : 0
Stack  : . LexToken(SEMICOLON,';',62,21,1431)
ERROR: Error  : . LexToken(SEMICOLON,';',62,21,1431)
State  : 0
Stack  : . LexToken(FOR,'for',64,5,1465)
ERROR: Error  : . LexToken(FOR,'for',64,5,1465)
State  : 0
Stack  : . LexToken(IDENT,'i',64,9,1469)
ERROR: Error  : . LexToken(IDENT,'i',64,9,1469)
State  : 0
Stack  : . LexToken(DEFINE,':=',64,11,1471)
ERROR: Error  : . LexToken(DEFINE,':=',64,11,1471)
State  : 0
Stack  : . LexToken(INT,'1',64,14,1474)
ERROR: Error  : . LexToken(INT,'1',64,14,1474)
State  : 0
Stack  : . LexToken(SEMICOLON,';',64,15,1475)
ERROR: Error  : . LexToken(SEMICOLON,';',64,15,1475)
State  : 0
Stack  : . LexToken(IDENT,'i',64,17,1477)
ERROR: Error  : . LexToken(IDENT,'i',64,17,1477)
State  : 0
Stack  : . LexToken(LEQ,'<=',64,18,1478)
ERROR: Error  : . LexToken(LEQ,'<=',64,18,1478)
State  : 0
Stack  : . LexToken(IDENT,'n',64,20,1480)
ERROR: Error  : . LexToken(IDENT,'n',64,20,1480)
State  : 0
Stack  : . LexToken(SEMICOLON,';',64,21,1481)
ERROR: Error  : . LexToken(SEMICOLON,';',64,21,1481)
State  : 0
Stack  : . LexToken(IDENT,'i',64,23,1483)
ERROR: Error  : . LexToken(IDENT,'i',64,23,1483)
State  : 0
Stack  : . LexToken(INC,'++',64,24,1484)
ERROR: Error  : . LexToken(INC,'++',64,24,1484)
State  : 0
Stack  : . LexToken(LBRACE,'{',64,27,1487)
ERROR: Error  : . LexToken(LBRACE,'{',64,27,1487)
State  : 0
Stack  : . LexToken(IDENT,'fmt',65,9,1497)
ERROR: Error  : . LexToken(IDENT,'fmt',65,9,1497)
State  : 0
Stack  : . LexToken(PERIOD,'.',65,12,1500)
ERROR: Error  : . LexToken(PERIOD,'.',65,12,1500)
State  : 0
Stack  : . LexToken(IDENT,'Println',65,13,1501)
ERROR: Error  : . LexToken(IDENT,'Println',65,13,1501)
State  : 0
Stack  : . LexToken(LPAREN,'(',65,20,1508)
ERROR: Error  : . LexToERROR: Error  : . LexToken(QUO,'/',58,35,1333)
State  : 0
Stack  : . LexToken(INT,'2',58,36,1334)
ERROR: Error  : . LexToken(INT,'2',58,36,1334)
State  : 0
Stack  : . LexToken(RBRACK,']',58,37,1335)
ERROR: Error  : . LexToken(RBRACK,']',58,37,1335)
State  : 0
Stack  : . LexToken(SEMICOLON,';',58,38,1336)
ERROR: Error  : . LexToken(SEMICOLON,';',58,38,1336)
State  : 0
Stack  : . LexToken(RBRACE,'}',59,5,1342)
ERROR: Error  : . LexToken(RBRACE,'}',59,5,1342)
State  : 0
Stack  : . LexToken(SEMICOLON,';',59,6,1343)
ERROR: Error  : . LexToken(SEMICOLON,';',59,6,1343)
State  : 0
Stack  : . LexToken(IDENT,'graph',60,5,1349)
ERROR: Error  : . LexToken(IDENT,'graph',60,5,1349)
State  : 0
Stack  : . LexToken(LBRACK,'[',60,10,1354)
ERROR: Error  : . LexToken(LBRACK,'[',60,10,1354)
State  : 0
Stack  : . LexToken(INT,'1',60,11,1355)
ERROR: Error  : . LexToken(INT,'1',60,11,1355)
State  : 0
Stack  : . LexToken(RBRACK,']',60,12,1356)
ERROR: Error  : . LexToken(RBRACK,']',60,12,1356)
State  : 0
Stack  : . LexToken(PERIOD,'.',60,13,1357)
ERROR: Error  : . LexToken(PERIOD,'.',60,13,1357)
State  : 0
Stack  : . LexToken(IDENT,'parent',60,14,1358)
ERROR: Error  : . LexToken(IDENT,'parent',60,14,1358)
State  : 0
Stack  : . LexToken(ASSIGN,'=',60,21,1365)
ERROR: Error  : . LexToken(ASSIGN,'=',60,21,1365)
State  : 0
Stack  : . LexToken(IDENT,'nil',60,23,1367)
ERROR: Error  : . LexToken(IDENT,'nil',60,23,1367)
State  : 0
Stack  : . LexToken(SEMICOLON,';',60,26,1370)
ERROR: Error  : . LexToken(SEMICOLON,';',60,26,1370)
State  : 0
Stack  : . LexToken(IDENT,'visit',62,5,1415)
ERROR: Error  : . LexToken(IDENT,'visit',62,5,1415)
State  : 0
Stack  : . LexToken(LPAREN,'(',62,10,1420)
ERROR: Error  : . LexToken(LPAREN,'(',62,10,1420)
State  : 0
Stack  : . LexToken(AND,'&',62,11,1421)
ERROR: Error  : . LexToken(AND,'&',62,11,1421)
State  : 0
Stack  : . LexToken(IDENT,'graph',62,12,1422)
ERROR: Error  : . LexToken(IDENT,'graph',62,12,1422)
State  : 0
Stack  : . LexToken(LBRACK,'[',62,17,1427)
ERROR: Error  : . LexToken(LBRACK,'[',62,17,1427)
State  : 0
Stack  : . LexToken(INT,'1',62,18,1428)
ERROR: Error  : . LexToken(INT,'1',62,18,1428)
State  : 0
Stack  : . LexToken(RBRACK,']',62,19,1429)
ERROR: Error  : . LexToken(RBRACK,']',62,19,1429)
State  : 0
Stack  : . LexToken(RPAREN,')',62,20,1430)
ERROR: Error  : . LexToken(RPAREN,')',62,20,1430)
State  : 0
Stack  : . LexToken(SEMICOLON,';',62,21,1431)
ERROR: Error  : . LexToken(SEMICOLON,';',62,21,1431)
State  : 0
Stack  : . LexToken(FOR,'for',64,5,1465)
ERROR: Error  : . LexToken(FOR,'for',64,5,1465)
State  : 0
Stack  : . LexToken(IDENT,'i',64,9,1469)
ERROR: Error  : . LexToken(IDENT,'i',64,9,1469)
State  : 0
Stack  : . LexToken(DEFINE,':=',64,11,1471)
ERROR: Error  : . LexToken(DEFINE,':=',64,11,1471)
State  : 0
Stack  : . LexToken(INT,'1',64,14,1474)
ERROR: Error  : . LexToken(INT,'1',64,14,1474)
State  : 0
Stack  : . LexToken(SEMICOLON,';',64,15,1475)
ERROR: Error  : . LexToken(SEMICOLON,';',64,15,1475)
State  : 0
Stack  : . LexToken(IDENT,'i',64,17,1477)
ERROR: Error  : . LexToken(IDENT,'i',64,17,1477)
State  : 0
Stack  : . LexToken(LEQ,'<=',64,18,1478)
ERROR: Error  : . LexToken(LEQ,'<=',64,18,1478)
State  : 0
Stack  : . LexToken(IDENT,'n',64,20,1480)
ERROR: Error  : . LexToken(IDENT,'n',64,20,1480)
State  : 0
Stack  : . LexToken(SEMICOLON,';',64,21,1481)
ERROR: Error  : . LexToken(SEMICOLON,';',64,21,1481)
State  : 0
Stack  : . LexToken(IDENT,'i',64,23,1483)
ERROR: Error  : . LexToken(IDENT,'i',64,23,1483)
State  : 0
Stack  : . LexToken(INC,'++',64,24,1484)
ERROR: Error  : . LexToken(INC,'++',64,24,1484)
State  : 0
Stack  : . LexToken(LBRACE,'{',64,27,1487)
ERROR: Error  : . LexToken(LBRACE,'{',64,27,1487)
State  : 0
Stack  : . LexToken(IDENT,'fmt',65,9,1497)
ERROR: Error  : . LexToken(IDENT,'fmt',65,9,1497)
State  : 0
Stack  : . LexToken(PERIOD,'.',65,12,1500)
ERROR: Error  : . LexToken(PERIOD,'.',65,12,1500)
State  : 0
Stack  : . LexToken(IDENT,'Println',65,13,1501)
ERROR: Error  : . LexToken(IDENT,'Println',65,13,1501)
State  : 0
Stack  : . LexToken(LPAREN,'(',65,20,1508)
ERROR: Error  : . LexToken(LPAREN,'(',65,20,1508)
State  : 0
Stack  : . LexToken(STRING,'" Subtree Sum for "',65,21,1509)
ERROR: Error  : . LexToken(STRING,'" Subtree Sum for "',65,21,1509)
State  : 0
Stack  : . LexToken(COMMA,',',65,40,1528)
ERROR: Error  : . LexToken(COMMA,',',65,40,1528)
State  : 0
Stack  : . LexToken(IDENT,'i',65,42,1530)
ERROR: Error  : . LexToken(IDENT,'i',65,42,1530)
State  : 0
Stack  : . LexToken(COMMA,',',65,43,1531)
ERROR: Error  : . LexToken(COMMA,',',65,43,1531)
State  : 0
Stack  : . LexToken(STRING,'" = "',65,45,1533)
ERROR: Error  : . LexToken(STRING,'" = "',65,45,1533)
State  : 0
Stack  : . LexToken(COMMA,',',65,50,1538)
ERROR: Error  : . LexToken(COMMA,',',65,50,1538)
State  : 0
Stack  : . LexToken(IDENT,'graph',65,51,1539)
ERROR: Error  : . LexToken(IDENT,'graph',65,51,1539)
State  : 0
Stack  : . LexToken(LBRACK,'[',65,56,1544)
ERROR: Error  : . LexToken(LBRACK,'[',65,56,1544)
State  : 0
Stack  : . LexToken(IDENT,'i',65,57,1545)
ERROR: Error  : . LexToken(IDENT,'i',65,57,1545)
State  : 0
Stack  : . LexToken(RBRACK,']',65,58,1546)
ERROR: Error  : . LexToken(RBRACK,']',65,58,1546)
State  : 0
Stack  : . LexToken(PERIOD,'.',65,59,1547)
ERROR: Error  : . LexToken(PERIOD,'.',65,59,1547)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',65,60,1548)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',65,60,1548)
State  : 0
Stack  : . LexToken(RPAREN,')',65,72,1560)
ERROR: Error  : . LexToken(RPAREN,')',65,72,1560)
State  : 0
Stack  : . LexToken(SEMICOLON,';',65,73,1561)
ERROR: Error  : . LexToken(SEMICOLON,';',65,73,1561)
State  : 0
Stack  : . LexToken(RBRACE,'}',66,5,1567)
ERROR: Error  : . LexToken(RBRACE,'}',66,5,1567)
State  : 0
Stack  : . LexToken(SEMICOLON,';',66,6,1568)
ERROR: Error  : . LexToken(SEMICOLON,';',66,6,1568)
State  : 0
Stack  : . LexToken(RBRACE,'}',67,1,1570)
ERROR: Error  : . LexToken(RBRACE,'}',67,1,1570)
State  : 0
Stack  : . LexToken(SEMICOLON,';',67,2,1571)
ERROR: Error  : . LexToken(SEMICOLON,';',67,2,1571)
State  : 0
Stack  : . $end
ERROR: Error  : . $end
ken(LPAREN,'(',65,20,1508)
State  : 0
Stack  : . LexToken(STRING,'" Subtree Sum for "',65,21,1509)
ERROR: Error  : . LexToken(STRING,'" Subtree Sum for "',65,21,1509)
State  : 0
Stack  : . LexToken(COMMA,',',65,40,1528)
ERROR: Error  : . LexToken(COMMA,',',65,40,1528)
State  : 0
Stack  : . LexToken(IDENT,'i',65,42,1530)
ERROR: Error  : . LexToken(IDENT,'i',65,42,1530)
State  : 0
Stack  : . LexToken(COMMA,',',65,43,1531)
ERROR: Error  : . LexToken(COMMA,',',65,43,1531)
State  : 0
Stack  : . LexToken(STRING,'" = "',65,45,1533)
ERROR: Error  : . LexToken(STRING,'" = "',65,45,1533)
State  : 0
Stack  : . LexToken(COMMA,',',65,50,1538)
ERROR: Error  : . LexToken(COMMA,',',65,50,1538)
State  : 0
Stack  : . LexToken(IDENT,'graph',65,51,1539)
ERROR: Error  : . LexToken(IDENT,'graph',65,51,1539)
State  : 0
Stack  : . LexToken(LBRACK,'[',65,56,1544)
ERROR: Error  : . LexToken(LBRACK,'[',65,56,1544)
State  : 0
Stack  : . LexToken(IDENT,'i',65,57,1545)
ERROR: Error  : . LexToken(IDENT,'i',65,57,1545)
State  : 0
Stack  : . LexToken(RBRACK,']',65,58,1546)
ERROR: Error  : . LexToken(RBRACK,']',65,58,1546)
State  : 0
Stack  : . LexToken(PERIOD,'.',65,59,1547)
ERROR: Error  : . LexToken(PERIOD,'.',65,59,1547)
State  : 0
Stack  : . LexToken(IDENT,'sub_tree_sum',65,60,1548)
ERROR: Error  : . LexToken(IDENT,'sub_tree_sum',65,60,1548)
State  : 0
Stack  : . LexToken(RPAREN,')',65,72,1560)
ERROR: Error  : . LexToken(RPAREN,')',65,72,1560)
State  : 0
Stack  : . LexToken(SEMICOLON,';',65,73,1561)
ERROR: Error  : . LexToken(SEMICOLON,';',65,73,1561)
State  : 0
Stack  : . LexToken(RBRACE,'}',66,5,1567)
ERROR: Error  : . LexToken(RBRACE,'}',66,5,1567)
State  : 0
Stack  : . LexToken(SEMICOLON,';',66,6,1568)
ERROR: Error  : . LexToken(SEMICOLON,';',66,6,1568)
State  : 0
Stack  : . LexToken(RBRACE,'}',67,1,1570)
ERROR: Error  : . LexToken(RBRACE,'}',67,1,1570)
State  : 0
Stack  : . LexToken(SEMICOLON,';',67,2,1571)
ERROR: Error  : . LexToken(SEMICOLON,';',67,2,1571)
State  : 0
Stack  : . $end
ERROR: Error  : . $end
